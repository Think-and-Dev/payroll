import {ethers} from 'hardhat';
import {parseEther} from 'ethers/lib/utils';
import {BigNumber} from 'ethers';
import payrollAbi from '../abi/Payroll.json';

async function decodeFunctionCall(data: string, value: BigNumber) {
  const payrollInterface = new ethers.utils.Interface(payrollAbi);
  const transactionDescription = payrollInterface.parseTransaction({data, value});
  console.log('=====================================================================');
  console.log('method', transactionDescription.signature);
  console.log('=====================================================================');
  console.log('Arguments');
  console.log(JSON.stringify(valueToShow(transactionDescription.args), null, 2));
  console.log('---------------------------------------------------------------------');
  console.log('Value', transactionDescription.value.toString(), 'im wei');
  console.log('---------------------------------------------------------------------');
}

const valueToShow = (value: any): any => {
  // If the value is a bigNumber we show it as a string as it's easier to read than hex
  if (value?._isBigNumber) {
    return value.toString();
  }

  if (Array.isArray(value)) {
    // values comes decoded as an array, but also the same values comes mapped with the original arg name.
    // Here we filter to get only the ones with names
    const properties = Object.keys(value).filter((key) => isNaN(parseFloat(key)));

    if (properties.length) {
      // If it is an enumerable and it has non numeric properties, it means that is a struct
      const result = {} as any;
      for (const key of properties) {
        result[key] = valueToShow(value[key]);
      }
      return result;
    } else {
      // If it's a simple array iterate through it to format the contet
      return value.map((x) => valueToShow(x));
    }
  }

  return value;
};

// https://bscscan.com/tx/0xda8a2a8d8f1032b9ea0c26d31b54141c79ea0b77dace5c28d8e972cb2431b7af
const args =
  '0x9272148200000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000016c4abbebea0100000000000000000000000000000000000000000000000000000000000006297c2d600000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005fbe3e77abd91a000000000000000000000000000000000000000000000002d89577d7d40200000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000000000000000000000000000815db1363880ff06200000000000000000000000000000000000000000000000889c067877c0600000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002600000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d9cf95b08b87a8fe49da81c93f58b80256be56390000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000005fbe3e77abd91a0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9cf95b08b87a8fe49da81c93f58b80256be563900000000000000000000000062c751f207517c7f0f4f86720be4e4368f519d670000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000002b1f3b1212d5aa57600000000000000000000000000000000000000000000000563e762425ab54aec00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000092f2c7902ee8a17b94b3edb29d0351a6a1bd572900000000000000000000000082732eca78474a772799b341100098f05464c40100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d63100000';
const amount = parseEther('0');
decodeFunctionCall(args, amount);
