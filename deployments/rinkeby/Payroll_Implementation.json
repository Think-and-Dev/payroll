{
  "address": "0x3d047d723702800161d492889F0D5136E88bceA4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPaymentFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSpend",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct Payroll.Swap[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmountToPay",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapAndPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x60a12e37db1f4b0fde68b05b18b1c5c214b7d620660bf25bfdf25b420dcf97d0",
  "receipt": {
    "to": null,
    "from": "0x62c751F207517c7f0f4f86720Be4e4368f519d67",
    "contractAddress": "0x3d047d723702800161d492889F0D5136E88bceA4",
    "transactionIndex": 2,
    "gasUsed": "2465181",
    "logsBloom": "0x
    "blockHash": "0xee2ac661c9329082d47952510a241077cc4396799753061dcf8a8a16b18b9129",
    "transactionHash": "0x60a12e37db1f4b0fde68b05b18b1c5c214b7d620660bf25bfdf25b420dcf97d0",
    "logs": [],
    "blockNumber": 10380922,
    "cumulativeGasUsed": "2814140",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a901e3aecf42482bdfd76e6377ef1761",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPaymentFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct Payroll.Swap[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountToPay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapAndPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lucas Marc\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another\",\"_payments\":\"The array of the Payment data\",\"_swaps\":\"The array of the Swaps data\",\"_totalAmountToSpend\":\"Total amount of erc20TokenOrigin to spend in swaps and payments. You must know the total amount of erc20TokenOrigin to spend on swaps and also to spend on payments.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"A contract that allows multiple payments in one transaction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])\":{\"notice\":\"Perform the swap, the transfer and finally the payment to the given addressesCurrently the function only works with ERC20 tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payroll.sol\":\"Payroll\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\n/**\\n * @title A contract that allows multiple payments in one transaction\\n * @author Lucas Marc\\n */\\ncontract Payroll is Initializable, AccessControl {\\n    bytes32 public constant PAYER_ROLE = keccak256(\\\"PAYER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    ISwapRouter public swapRouter;\\n\\n    address public owner;\\n\\n    struct Payment {\\n        address token;\\n        uint256 totalAmountToPay;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n\\n    struct Swap {\\n        address token;\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        uint24 poolFee;\\n    }\\n\\n    function initialize(address _owner, address _swapRouter)\\n        public\\n        initializer\\n    {\\n        owner = _owner;\\n        swapRouter = ISwapRouter(_swapRouter);\\n        _setupRole(ADMIN_ROLE, _owner);\\n        _setupRole(PAYER_ROLE, _owner);\\n    }\\n\\n    event BatchPaymentFinished(\\n        address[] _receivers,\\n        uint256[] _amountsToTransfer\\n    );\\n\\n    event SwapFinished(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountReceived\\n    );\\n\\n    /**\\n     * Perform the swap, the transfer and finally the payment to the given addresses\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another\\n     * @param _totalAmountToSpend Total amount of erc20TokenOrigin to spend in swaps and payments.\\n     * You must know the total amount of erc20TokenOrigin to spend on swaps and also to spend on payments.\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @param _swaps The array of the Swaps data\\n     * @param _payments The array of the Payment data\\n     * @notice Currently the function only works with ERC20 tokens\\n     */\\n    function performSwapAndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSpend,\\n        uint32 _deadline,\\n        Swap[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external onlyRole(PAYER_ROLE) {\\n        if (_swaps.length > 0) {\\n            performSwap(\\n                _erc20TokenOrigin,\\n                _totalAmountToSpend,\\n                _deadline,\\n                _swaps\\n            );\\n        }\\n\\n        transferFromWallet(_payments);\\n        performMultiPayment(_payments);\\n\\n        // returns the leftover of erc20TokenOrigin if it was not used in payments\\n        returnLeftover(_erc20TokenOrigin);\\n    }\\n\\n    function transferFromWallet(Payment[] calldata _payments) internal {\\n        // transfer the totalAmountToPay minus the current balance of the contract\\n        // for each token from the msg.sender to this contract\\n        // msg.sender must approve this contract for each token\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            IERC20Basic erc20token = IERC20Basic(_payments[i].token);\\n            uint256 currentBalance = erc20token.balanceOf(address(this));\\n            int256 amount = int256(_payments[i].totalAmountToPay) -\\n                int256(currentBalance);\\n            if (amount > 0) {\\n                TransferHelper.safeTransferFrom(\\n                    _payments[i].token,\\n                    msg.sender,\\n                    address(this),\\n                    uint256(amount)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Perform the swap to the given token addresses and amounts\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another\\n     * @param _totalAmountToSpend Total amount of erc20TokenOrigin to spend in swaps\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @param _swaps The array of the Swaps data\\n     * @notice Currently the function only works with ERC20 tokens\\n     */\\n    function performSwap(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSpend,\\n        uint32 _deadline,\\n        Swap[] calldata _swaps\\n    ) internal {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(\\n            _erc20TokenOrigin,\\n            msg.sender,\\n            address(this),\\n            _totalAmountToSpend\\n        );\\n\\n        // approves the swapRouter to spend totalAmountToSpend of erc20TokenOrigin\\n        TransferHelper.safeApprove(\\n            _erc20TokenOrigin,\\n            address(swapRouter),\\n            _totalAmountToSpend\\n        );\\n\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            swapExactOutputSingle(\\n                _erc20TokenOrigin,\\n                _swaps[i].token,\\n                _swaps[i].poolFee,\\n                _swaps[i].amountOut,\\n                _swaps[i].amountInMax,\\n                _deadline\\n            );\\n        }\\n\\n        // removes the approval to swapRouter\\n        TransferHelper.safeApprove(_erc20TokenOrigin, address(swapRouter), 0);\\n    }\\n\\n    /**\\n     * Perform ERC20 tokens swap\\n     * @param _tokenIn ERC20 token address to swap for another\\n     * @param _tokenOut ERC20 token address to receive\\n     * @param _poolFee Pool fee tokenIn/tokenOut\\n     * @param _amountOut Exact amount of tokenOut to receive\\n     * @param _amountInMax Max amount of tokenIn to pay\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @notice Currently the function only works with ERC20 tokens\\n     * @notice Currently the function only works with single pools tokenIn/tokenOut\\n     */\\n    function swapExactOutputSingle(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint24 _poolFee,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint32 _deadline\\n    ) internal returns (uint256 amountIn) {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\\n            .ExactOutputSingleParams({\\n                tokenIn: _tokenIn,\\n                tokenOut: _tokenOut,\\n                fee: _poolFee,\\n                recipient: address(this),\\n                deadline: _deadline,\\n                amountOut: _amountOut,\\n                amountInMaximum: _amountInMax,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // return the amount spend of tokenIn\\n        amountIn = swapRouter.exactOutputSingle(params);\\n\\n        emit SwapFinished(_tokenIn, _tokenOut, amountIn);\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts\\n     * @param _payments The array of the Payment data\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) internal {\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            performPayment(\\n                _payments[i].token,\\n                _payments[i].receivers,\\n                _payments[i].amountsToTransfer\\n            );\\n\\n            // return the leftover for each token after perform all payments\\n            returnLeftover(_payments[i].token);\\n        }\\n    }\\n\\n    /**\\n     * Performs the payment to the given addresses\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer\\n     * @param _receivers The array of payment receivers\\n     * @param _amountsToTransfer The array of payments' amounts to perform. The amount will be transfered to the address on _receivers with the same index.\\n     * @notice Currently the function only works with only one ERC20 token\\n     */\\n    function performPayment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        require(\\n            _amountsToTransfer.length == _receivers.length,\\n            \\\"Both arrays must have the same length\\\"\\n        );\\n\\n        address currentReceiver;\\n        uint256 currentAmount;\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            currentReceiver = _receivers[i];\\n            require(\\n                _receivers[i] != address(0),\\n                \\\"ERC20: cannot register a 0 address\\\"\\n            );\\n            currentAmount = _amountsToTransfer[i];\\n            TransferHelper.safeTransfer(\\n                _erc20TokenAddress,\\n                currentReceiver,\\n                currentAmount\\n            );\\n        }\\n        emit BatchPaymentFinished(_receivers, _amountsToTransfer);\\n    }\\n\\n    /**\\n     * Return all balance of an ERC20 to the msg.sender\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer\\n     * @notice Currently the function only works with only one ERC20 token\\n     */\\n    function returnLeftover(address _erc20TokenAddress) internal {\\n        IERC20Basic erc20token = IERC20Basic(_erc20TokenAddress);\\n        uint256 accountBalance = erc20token.balanceOf(address(this));\\n\\n        if (accountBalance > 0) {\\n            TransferHelper.safeTransfer(\\n                _erc20TokenAddress,\\n                msg.sender,\\n                accountBalance\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x348d3e1c8d53009f066a125067094468d604406ff2eb74e2d7926a8427785f49\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612be9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806377f050b01161008c57806391d148541161006657806391d14854146101fe578063a217fddf1461022e578063c31c9c071461024c578063d547741f1461026a576100cf565b806377f050b0146101a6578063891aad70146101c45780638da5cb5b146101e0576100cf565b806301ffc9a7146100d4578063248a9ca3146101045780632f2ff15d1461013457806336568abe14610150578063485cc9551461016c57806375b238fc14610188575b600080fd5b6100ee60048036038101906100e99190611d7d565b610286565b6040516100fb91906122ee565b60405180910390f35b61011e60048036038101906101199190611d18565b610300565b60405161012b9190612309565b60405180910390f35b61014e60048036038101906101499190611d41565b610320565b005b61016a60048036038101906101659190611d41565b610349565b005b61018660048036038101906101819190611c03565b6103cc565b005b61019061056b565b60405161019d9190612309565b60405180910390f35b6101ae610572565b6040516101bb9190612309565b60405180910390f35b6101de60048036038101906101d99190611c3f565b610596565b005b6101e8610609565b6040516101f59190612238565b60405180910390f35b61021860048036038101906102139190611d41565b61062f565b60405161022591906122ee565b60405180910390f35b61023661069a565b6040516102439190612309565b60405180910390f35b6102546106a1565b6040516102619190612324565b60405180910390f35b610284600480360381019061027f9190611d41565b6106c7565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102f957506102f8826106f0565b5b9050919050565b600060016000838152602001908152602001600020600101549050919050565b61032982610300565b61033a8161033561075a565b610762565b61034483836107ff565b505050565b61035161075a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590612441565b60405180910390fd5b6103c882826108df565b5050565b600060019054906101000a900460ff166103f45760008054906101000a900460ff16156103fd565b6103fc6109c1565b5b61043c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610433906123a1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561048c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061051b6000801b846109d2565b6105457f8ec07e268e32cae7f300b49ad34f20106d088445cb9d9b2d62cbd864638308b2846109d2565b80156105665760008060016101000a81548160ff0219169083151502179055505b505050565b6000801b81565b7f8ec07e268e32cae7f300b49ad34f20106d088445cb9d9b2d62cbd864638308b281565b7f8ec07e268e32cae7f300b49ad34f20106d088445cb9d9b2d62cbd864638308b26105c8816105c361075a565b610762565b60008585905011156105e2576105e188888888886109e0565b5b6105ec8383610ba3565b6105f68383610d8a565b6105ff88610f2e565b5050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106d082610300565b6106e1816106dc61075a565b610762565b6106eb83836108df565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61076c828261062f565b6107fb576107918173ffffffffffffffffffffffffffffffffffffffff166014610fda565b61079f8360001c6020610fda565b6040516020016107b09291906121fe565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f2919061233f565b60405180910390fd5b5050565b610809828261062f565b6108db57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061088061075a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6108e9828261062f565b156109bd5760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061096261075a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006109cc306112d4565b15905090565b6109dc82826107ff565b5050565b6109ec853330876112f7565b610a1985600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168661144f565b60005b82829050811015610b6d57610b5986848484818110610a64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050608002016000016020810190610a7c9190611bda565b858585818110610ab5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050608002016060016020810190610acd9190611da6565b868686818110610b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506080020160200135878787818110610b49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506080020160400135896115a4565b508080610b6590612857565b915050610a1c565b50610b9c85600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600061144f565b5050505050565b60005b82829050811015610d85576000838383818110610bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610bfe919061252b565b6000016020810190610c109190611bda565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c4d9190612238565b60206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190611dcf565b9050600081868686818110610cdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610ced919061252b565b60200135610cfb919061268c565b90506000811315610d6f57610d6e868686818110610d42577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610d54919061252b565b6000016020810190610d669190611bda565b3330846112f7565b5b5050508080610d7d90612857565b915050610ba6565b505050565b60005b82829050811015610f2957610eb1838383818110610dd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610de6919061252b565b6000016020810190610df89190611bda565b848484818110610e31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610e43919061252b565b8060400190610e52919061247d565b868686818110610e8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610e9d919061252b565b8060600190610eac91906124d4565b61173c565b610f16838383818110610eed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610eff919061252b565b6000016020810190610f119190611bda565b610f2e565b8080610f2190612857565b915050610d8d565b505050565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f6e9190612238565b60206040518083038186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190611dcf565b90506000811115610fd557610fd4833383611949565b5b505050565b606060006002836002610fed9190612632565b610ff791906125dc565b67ffffffffffffffff811115611036577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110685781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106110c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611150577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026111909190612632565b61119a91906125dc565b90505b6001811115611286577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611202577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061123f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061127f9061282d565b905061119d565b50600084146112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c190612361565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161132e93929190612253565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161139891906121e7565b6000604051808303816000865af19150503d80600081146113d5576040519150601f19603f3d011682016040523d82523d6000602084013e6113da565b606091505b509150915081801561140857506000815114806114075750808060200190518101906114069190611cef565b5b5b611447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143e90612421565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161148492919061228a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114ee91906121e7565b6000604051808303816000865af19150503d806000811461152b576040519150601f19603f3d011682016040523d82523d6000602084013e611530565b606091505b509150915081801561155e575060008151148061155d57508080602001905181019061155c9190611cef565b5b5b61159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490612381565b60405180910390fd5b5050505050565b6000806040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018762ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff168152602001868152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db3e2198826040518263ffffffff1660e01b81526004016116a29190612461565b602060405180830381600087803b1580156116bc57600080fd5b505af11580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190611dcf565b91507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5688888460405161172993929190612253565b60405180910390a1509695505050505050565b838390508282905014611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b906123c1565b60405180910390fd5b60008060005b86869050811015611902578686828181106117ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906117e39190611bda565b9250600073ffffffffffffffffffffffffffffffffffffffff16878783818110611836577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061184b9190611bda565b73ffffffffffffffffffffffffffffffffffffffff1614156118a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611899906123e1565b60405180910390fd5b8484828181106118db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013591506118ef888484611949565b80806118fa90612857565b91505061178a565b507f6b82a3962e5fe7c719b4bec2b902045249682ce10c3004d113ae455e5d8c563d8686868660405161193894939291906122b3565b60405180910390a150505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161197e92919061228a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516119e891906121e7565b6000604051808303816000865af19150503d8060008114611a25576040519150601f19603f3d011682016040523d82523d6000602084013e611a2a565b606091505b5091509150818015611a585750600081511480611a57575080806020019051810190611a569190611cef565b5b5b611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e90612401565b60405180910390fd5b5050505050565b600081359050611aad81612b12565b92915050565b60008083601f840112611ac557600080fd5b8235905067ffffffffffffffff811115611ade57600080fd5b602083019150836020820283011115611af657600080fd5b9250929050565b60008083601f840112611b0f57600080fd5b8235905067ffffffffffffffff811115611b2857600080fd5b602083019150836080820283011115611b4057600080fd5b9250929050565b600081519050611b5681612b29565b92915050565b600081359050611b6b81612b40565b92915050565b600081359050611b8081612b57565b92915050565b600081359050611b9581612b6e565b92915050565b600081359050611baa81612b85565b92915050565b600081519050611bbf81612b85565b92915050565b600081359050611bd481612b9c565b92915050565b600060208284031215611bec57600080fd5b6000611bfa84828501611a9e565b91505092915050565b60008060408385031215611c1657600080fd5b6000611c2485828601611a9e565b9250506020611c3585828601611a9e565b9150509250929050565b600080600080600080600060a0888a031215611c5a57600080fd5b6000611c688a828b01611a9e565b9750506020611c798a828b01611b9b565b9650506040611c8a8a828b01611bc5565b955050606088013567ffffffffffffffff811115611ca757600080fd5b611cb38a828b01611afd565b9450945050608088013567ffffffffffffffff811115611cd257600080fd5b611cde8a828b01611ab3565b925092505092959891949750929550565b600060208284031215611d0157600080fd5b6000611d0f84828501611b47565b91505092915050565b600060208284031215611d2a57600080fd5b6000611d3884828501611b5c565b91505092915050565b60008060408385031215611d5457600080fd5b6000611d6285828601611b5c565b9250506020611d7385828601611a9e565b9150509250929050565b600060208284031215611d8f57600080fd5b6000611d9d84828501611b71565b91505092915050565b600060208284031215611db857600080fd5b6000611dc684828501611b86565b91505092915050565b600060208284031215611de157600080fd5b6000611def84828501611bb0565b91505092915050565b6000611e048383611e10565b60208301905092915050565b611e1981612720565b82525050565b611e2881612720565b82525050565b6000611e3a838561257c565b9350611e458261254f565b8060005b85811015611e7e57611e5b82846125c5565b611e658882611df8565b9750611e708361256f565b925050600181019050611e49565b5085925050509392505050565b6000611e97838561258d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611ec657600080fd5b602083029250611ed78385846127eb565b82840190509392505050565b611eec81612732565b82525050565b611efb8161273e565b82525050565b6000611f0c82612559565b611f16818561259e565b9350611f268185602086016127fa565b80840191505092915050565b611f3b816127c7565b82525050565b6000611f4c82612564565b611f5681856125a9565b9350611f668185602086016127fa565b611f6f816128cf565b840191505092915050565b6000611f8582612564565b611f8f81856125ba565b9350611f9f8185602086016127fa565b80840191505092915050565b6000611fb86020836125a9565b9150611fc3826128e0565b602082019050919050565b6000611fdb6002836125a9565b9150611fe682612909565b602082019050919050565b6000611ffe602e836125a9565b915061200982612932565b604082019050919050565b60006120216025836125a9565b915061202c82612981565b604082019050919050565b60006120446022836125a9565b915061204f826129d0565b604082019050919050565b60006120676002836125a9565b915061207282612a1f565b602082019050919050565b600061208a6003836125a9565b915061209582612a48565b602082019050919050565b60006120ad6017836125ba565b91506120b882612a71565b601782019050919050565b60006120d06011836125ba565b91506120db82612a9a565b601182019050919050565b60006120f3602f836125a9565b91506120fe82612ac3565b604082019050919050565b610100820160008201516121206000850182611e10565b5060208201516121336020850182611e10565b50604082015161214660408501826121ba565b5060608201516121596060850182611e10565b50608082015161216c60808501826121c9565b5060a082015161217f60a08501826121c9565b5060c082015161219260c08501826121c9565b5060e08201516121a560e08501826121ab565b50505050565b6121b48161277e565b82525050565b6121c38161279e565b82525050565b6121d2816127ad565b82525050565b6121e1816127ad565b82525050565b60006121f38284611f01565b915081905092915050565b6000612209826120a0565b91506122158285611f7a565b9150612220826120c3565b915061222c8284611f7a565b91508190509392505050565b600060208201905061224d6000830184611e1f565b92915050565b60006060820190506122686000830186611e1f565b6122756020830185611e1f565b61228260408301846121d8565b949350505050565b600060408201905061229f6000830185611e1f565b6122ac60208301846121d8565b9392505050565b600060408201905081810360008301526122ce818688611e2e565b905081810360208301526122e3818486611e8b565b905095945050505050565b60006020820190506123036000830184611ee3565b92915050565b600060208201905061231e6000830184611ef2565b92915050565b60006020820190506123396000830184611f32565b92915050565b600060208201905081810360008301526123598184611f41565b905092915050565b6000602082019050818103600083015261237a81611fab565b9050919050565b6000602082019050818103600083015261239a81611fce565b9050919050565b600060208201905081810360008301526123ba81611ff1565b9050919050565b600060208201905081810360008301526123da81612014565b9050919050565b600060208201905081810360008301526123fa81612037565b9050919050565b6000602082019050818103600083015261241a8161205a565b9050919050565b6000602082019050818103600083015261243a8161207d565b9050919050565b6000602082019050818103600083015261245a816120e6565b9050919050565b6000610100820190506124776000830184612109565b92915050565b6000808335600160200384360303811261249657600080fd5b80840192508235915067ffffffffffffffff8211156124b457600080fd5b6020830192506020820236038313156124cc57600080fd5b509250929050565b600080833560016020038436030381126124ed57600080fd5b80840192508235915067ffffffffffffffff82111561250b57600080fd5b60208301925060208202360383131561252357600080fd5b509250929050565b60008235600160800383360303811261254357600080fd5b80830191505092915050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006125d46020840184611a9e565b905092915050565b60006125e7826127ad565b91506125f2836127ad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612627576126266128a0565b5b828201905092915050565b600061263d826127ad565b9150612648836127ad565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612681576126806128a0565b5b828202905092915050565b600061269782612774565b91506126a283612774565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156126dd576126dc6128a0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615612715576127146128a0565b5b828203905092915050565b600061272b8261277e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006127d2826127d9565b9050919050565b60006127e48261277e565b9050919050565b82818337600083830152505050565b60005b838110156128185780820151818401526020810190506127fd565b83811115612827576000848401525b50505050565b6000612838826127ad565b9150600082141561284c5761284b6128a0565b5b600182039050919050565b6000612862826127ad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612895576128946128a0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f426f746820617272617973206d7573742068617665207468652073616d65206c60008201527f656e677468000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2063616e6e6f742072656769737465722061203020616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612b1b81612720565b8114612b2657600080fd5b50565b612b3281612732565b8114612b3d57600080fd5b50565b612b498161273e565b8114612b5457600080fd5b50565b612b6081612748565b8114612b6b57600080fd5b50565b612b778161279e565b8114612b8257600080fd5b50565b612b8e816127ad565b8114612b9957600080fd5b50565b612ba5816127b7565b8114612bb057600080fd5b5056fea26469706673582212202a5bbcd7840f3068815a33873f1109588f88320277d08a094eec69c35d329fce64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806377f050b01161008c57806391d148541161006657806391d14854146101fe578063a217fddf1461022e578063c31c9c071461024c578063d547741f1461026a576100cf565b806377f050b0146101a6578063891aad70146101c45780638da5cb5b146101e0576100cf565b806301ffc9a7146100d4578063248a9ca3146101045780632f2ff15d1461013457806336568abe14610150578063485cc9551461016c57806375b238fc14610188575b600080fd5b6100ee60048036038101906100e99190611d7d565b610286565b6040516100fb91906122ee565b60405180910390f35b61011e60048036038101906101199190611d18565b610300565b60405161012b9190612309565b60405180910390f35b61014e60048036038101906101499190611d41565b610320565b005b61016a60048036038101906101659190611d41565b610349565b005b61018660048036038101906101819190611c03565b6103cc565b005b61019061056b565b60405161019d9190612309565b60405180910390f35b6101ae610572565b6040516101bb9190612309565b60405180910390f35b6101de60048036038101906101d99190611c3f565b610596565b005b6101e8610609565b6040516101f59190612238565b60405180910390f35b61021860048036038101906102139190611d41565b61062f565b60405161022591906122ee565b60405180910390f35b61023661069a565b6040516102439190612309565b60405180910390f35b6102546106a1565b6040516102619190612324565b60405180910390f35b610284600480360381019061027f9190611d41565b6106c7565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102f957506102f8826106f0565b5b9050919050565b600060016000838152602001908152602001600020600101549050919050565b61032982610300565b61033a8161033561075a565b610762565b61034483836107ff565b505050565b61035161075a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590612441565b60405180910390fd5b6103c882826108df565b5050565b600060019054906101000a900460ff166103f45760008054906101000a900460ff16156103fd565b6103fc6109c1565b5b61043c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610433906123a1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561048c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061051b6000801b846109d2565b6105457f8ec07e268e32cae7f300b49ad34f20106d088445cb9d9b2d62cbd864638308b2846109d2565b80156105665760008060016101000a81548160ff0219169083151502179055505b505050565b6000801b81565b7f8ec07e268e32cae7f300b49ad34f20106d088445cb9d9b2d62cbd864638308b281565b7f8ec07e268e32cae7f300b49ad34f20106d088445cb9d9b2d62cbd864638308b26105c8816105c361075a565b610762565b60008585905011156105e2576105e188888888886109e0565b5b6105ec8383610ba3565b6105f68383610d8a565b6105ff88610f2e565b5050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106d082610300565b6106e1816106dc61075a565b610762565b6106eb83836108df565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61076c828261062f565b6107fb576107918173ffffffffffffffffffffffffffffffffffffffff166014610fda565b61079f8360001c6020610fda565b6040516020016107b09291906121fe565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f2919061233f565b60405180910390fd5b5050565b610809828261062f565b6108db57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061088061075a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6108e9828261062f565b156109bd5760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061096261075a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006109cc306112d4565b15905090565b6109dc82826107ff565b5050565b6109ec853330876112f7565b610a1985600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168661144f565b60005b82829050811015610b6d57610b5986848484818110610a64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050608002016000016020810190610a7c9190611bda565b858585818110610ab5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050608002016060016020810190610acd9190611da6565b868686818110610b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506080020160200135878787818110610b49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506080020160400135896115a4565b508080610b6590612857565b915050610a1c565b50610b9c85600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600061144f565b5050505050565b60005b82829050811015610d85576000838383818110610bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610bfe919061252b565b6000016020810190610c109190611bda565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c4d9190612238565b60206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190611dcf565b9050600081868686818110610cdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610ced919061252b565b60200135610cfb919061268c565b90506000811315610d6f57610d6e868686818110610d42577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610d54919061252b565b6000016020810190610d669190611bda565b3330846112f7565b5b5050508080610d7d90612857565b915050610ba6565b505050565b60005b82829050811015610f2957610eb1838383818110610dd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610de6919061252b565b6000016020810190610df89190611bda565b848484818110610e31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610e43919061252b565b8060400190610e52919061247d565b868686818110610e8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610e9d919061252b565b8060600190610eac91906124d4565b61173c565b610f16838383818110610eed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002810190610eff919061252b565b6000016020810190610f119190611bda565b610f2e565b8080610f2190612857565b915050610d8d565b505050565b600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f6e9190612238565b60206040518083038186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190611dcf565b90506000811115610fd557610fd4833383611949565b5b505050565b606060006002836002610fed9190612632565b610ff791906125dc565b67ffffffffffffffff811115611036577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110685781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106110c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611150577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026111909190612632565b61119a91906125dc565b90505b6001811115611286577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611202577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061123f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061127f9061282d565b905061119d565b50600084146112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c190612361565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161132e93929190612253565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161139891906121e7565b6000604051808303816000865af19150503d80600081146113d5576040519150601f19603f3d011682016040523d82523d6000602084013e6113da565b606091505b509150915081801561140857506000815114806114075750808060200190518101906114069190611cef565b5b5b611447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143e90612421565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161148492919061228a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114ee91906121e7565b6000604051808303816000865af19150503d806000811461152b576040519150601f19603f3d011682016040523d82523d6000602084013e611530565b606091505b509150915081801561155e575060008151148061155d57508080602001905181019061155c9190611cef565b5b5b61159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490612381565b60405180910390fd5b5050505050565b6000806040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018762ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff168152602001868152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db3e2198826040518263ffffffff1660e01b81526004016116a29190612461565b602060405180830381600087803b1580156116bc57600080fd5b505af11580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190611dcf565b91507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5688888460405161172993929190612253565b60405180910390a1509695505050505050565b838390508282905014611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b906123c1565b60405180910390fd5b60008060005b86869050811015611902578686828181106117ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906117e39190611bda565b9250600073ffffffffffffffffffffffffffffffffffffffff16878783818110611836577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061184b9190611bda565b73ffffffffffffffffffffffffffffffffffffffff1614156118a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611899906123e1565b60405180910390fd5b8484828181106118db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013591506118ef888484611949565b80806118fa90612857565b91505061178a565b507f6b82a3962e5fe7c719b4bec2b902045249682ce10c3004d113ae455e5d8c563d8686868660405161193894939291906122b3565b60405180910390a150505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161197e92919061228a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516119e891906121e7565b6000604051808303816000865af19150503d8060008114611a25576040519150601f19603f3d011682016040523d82523d6000602084013e611a2a565b606091505b5091509150818015611a585750600081511480611a57575080806020019051810190611a569190611cef565b5b5b611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e90612401565b60405180910390fd5b5050505050565b600081359050611aad81612b12565b92915050565b60008083601f840112611ac557600080fd5b8235905067ffffffffffffffff811115611ade57600080fd5b602083019150836020820283011115611af657600080fd5b9250929050565b60008083601f840112611b0f57600080fd5b8235905067ffffffffffffffff811115611b2857600080fd5b602083019150836080820283011115611b4057600080fd5b9250929050565b600081519050611b5681612b29565b92915050565b600081359050611b6b81612b40565b92915050565b600081359050611b8081612b57565b92915050565b600081359050611b9581612b6e565b92915050565b600081359050611baa81612b85565b92915050565b600081519050611bbf81612b85565b92915050565b600081359050611bd481612b9c565b92915050565b600060208284031215611bec57600080fd5b6000611bfa84828501611a9e565b91505092915050565b60008060408385031215611c1657600080fd5b6000611c2485828601611a9e565b9250506020611c3585828601611a9e565b9150509250929050565b600080600080600080600060a0888a031215611c5a57600080fd5b6000611c688a828b01611a9e565b9750506020611c798a828b01611b9b565b9650506040611c8a8a828b01611bc5565b955050606088013567ffffffffffffffff811115611ca757600080fd5b611cb38a828b01611afd565b9450945050608088013567ffffffffffffffff811115611cd257600080fd5b611cde8a828b01611ab3565b925092505092959891949750929550565b600060208284031215611d0157600080fd5b6000611d0f84828501611b47565b91505092915050565b600060208284031215611d2a57600080fd5b6000611d3884828501611b5c565b91505092915050565b60008060408385031215611d5457600080fd5b6000611d6285828601611b5c565b9250506020611d7385828601611a9e565b9150509250929050565b600060208284031215611d8f57600080fd5b6000611d9d84828501611b71565b91505092915050565b600060208284031215611db857600080fd5b6000611dc684828501611b86565b91505092915050565b600060208284031215611de157600080fd5b6000611def84828501611bb0565b91505092915050565b6000611e048383611e10565b60208301905092915050565b611e1981612720565b82525050565b611e2881612720565b82525050565b6000611e3a838561257c565b9350611e458261254f565b8060005b85811015611e7e57611e5b82846125c5565b611e658882611df8565b9750611e708361256f565b925050600181019050611e49565b5085925050509392505050565b6000611e97838561258d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611ec657600080fd5b602083029250611ed78385846127eb565b82840190509392505050565b611eec81612732565b82525050565b611efb8161273e565b82525050565b6000611f0c82612559565b611f16818561259e565b9350611f268185602086016127fa565b80840191505092915050565b611f3b816127c7565b82525050565b6000611f4c82612564565b611f5681856125a9565b9350611f668185602086016127fa565b611f6f816128cf565b840191505092915050565b6000611f8582612564565b611f8f81856125ba565b9350611f9f8185602086016127fa565b80840191505092915050565b6000611fb86020836125a9565b9150611fc3826128e0565b602082019050919050565b6000611fdb6002836125a9565b9150611fe682612909565b602082019050919050565b6000611ffe602e836125a9565b915061200982612932565b604082019050919050565b60006120216025836125a9565b915061202c82612981565b604082019050919050565b60006120446022836125a9565b915061204f826129d0565b604082019050919050565b60006120676002836125a9565b915061207282612a1f565b602082019050919050565b600061208a6003836125a9565b915061209582612a48565b602082019050919050565b60006120ad6017836125ba565b91506120b882612a71565b601782019050919050565b60006120d06011836125ba565b91506120db82612a9a565b601182019050919050565b60006120f3602f836125a9565b91506120fe82612ac3565b604082019050919050565b610100820160008201516121206000850182611e10565b5060208201516121336020850182611e10565b50604082015161214660408501826121ba565b5060608201516121596060850182611e10565b50608082015161216c60808501826121c9565b5060a082015161217f60a08501826121c9565b5060c082015161219260c08501826121c9565b5060e08201516121a560e08501826121ab565b50505050565b6121b48161277e565b82525050565b6121c38161279e565b82525050565b6121d2816127ad565b82525050565b6121e1816127ad565b82525050565b60006121f38284611f01565b915081905092915050565b6000612209826120a0565b91506122158285611f7a565b9150612220826120c3565b915061222c8284611f7a565b91508190509392505050565b600060208201905061224d6000830184611e1f565b92915050565b60006060820190506122686000830186611e1f565b6122756020830185611e1f565b61228260408301846121d8565b949350505050565b600060408201905061229f6000830185611e1f565b6122ac60208301846121d8565b9392505050565b600060408201905081810360008301526122ce818688611e2e565b905081810360208301526122e3818486611e8b565b905095945050505050565b60006020820190506123036000830184611ee3565b92915050565b600060208201905061231e6000830184611ef2565b92915050565b60006020820190506123396000830184611f32565b92915050565b600060208201905081810360008301526123598184611f41565b905092915050565b6000602082019050818103600083015261237a81611fab565b9050919050565b6000602082019050818103600083015261239a81611fce565b9050919050565b600060208201905081810360008301526123ba81611ff1565b9050919050565b600060208201905081810360008301526123da81612014565b9050919050565b600060208201905081810360008301526123fa81612037565b9050919050565b6000602082019050818103600083015261241a8161205a565b9050919050565b6000602082019050818103600083015261243a8161207d565b9050919050565b6000602082019050818103600083015261245a816120e6565b9050919050565b6000610100820190506124776000830184612109565b92915050565b6000808335600160200384360303811261249657600080fd5b80840192508235915067ffffffffffffffff8211156124b457600080fd5b6020830192506020820236038313156124cc57600080fd5b509250929050565b600080833560016020038436030381126124ed57600080fd5b80840192508235915067ffffffffffffffff82111561250b57600080fd5b60208301925060208202360383131561252357600080fd5b509250929050565b60008235600160800383360303811261254357600080fd5b80830191505092915050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006125d46020840184611a9e565b905092915050565b60006125e7826127ad565b91506125f2836127ad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612627576126266128a0565b5b828201905092915050565b600061263d826127ad565b9150612648836127ad565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612681576126806128a0565b5b828202905092915050565b600061269782612774565b91506126a283612774565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156126dd576126dc6128a0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615612715576127146128a0565b5b828203905092915050565b600061272b8261277e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006127d2826127d9565b9050919050565b60006127e48261277e565b9050919050565b82818337600083830152505050565b60005b838110156128185780820151818401526020810190506127fd565b83811115612827576000848401525b50505050565b6000612838826127ad565b9150600082141561284c5761284b6128a0565b5b600182039050919050565b6000612862826127ad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612895576128946128a0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f426f746820617272617973206d7573742068617665207468652073616d65206c60008201527f656e677468000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2063616e6e6f742072656769737465722061203020616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612b1b81612720565b8114612b2657600080fd5b50565b612b3281612732565b8114612b3d57600080fd5b50565b612b498161273e565b8114612b5457600080fd5b50565b612b6081612748565b8114612b6b57600080fd5b50565b612b778161279e565b8114612b8257600080fd5b50565b612b8e816127ad565b8114612b9957600080fd5b50565b612ba5816127b7565b8114612bb057600080fd5b5056fea26469706673582212202a5bbcd7840f3068815a33873f1109588f88320277d08a094eec69c35d329fce64736f6c63430008040033",
  "devdoc": {
    "author": "Lucas Marc",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail",
          "_erc20TokenOrigin": "ERC20 token address to swap for another",
          "_payments": "The array of the Payment data",
          "_swaps": "The array of the Swaps data",
          "_totalAmountToSpend": "Total amount of erc20TokenOrigin to spend in swaps and payments. You must know the total amount of erc20TokenOrigin to spend on swaps and also to spend on payments."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "A contract that allows multiple payments in one transaction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])": {
        "notice": "Perform the swap, the transfer and finally the payment to the given addressesCurrently the function only works with ERC20 tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 341,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)336_storage)"
      },
      {
        "astId": 3017,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "swapRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwapRouter)2822"
      },
      {
        "astId": 3019,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapRouter)2822": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)336_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)336_storage"
      },
      "t_struct(RoleData)336_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 333,
            "contract": "contracts/Payroll.sol:Payroll",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 335,
            "contract": "contracts/Payroll.sol:Payroll",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}