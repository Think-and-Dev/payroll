{
  "address": "0x229C76049b205436D49705922782Bfb182e26676",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPaymentFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "FeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "SwapRouterChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MANTISSA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20TokenOrigin",
          "type": "address[]"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapV2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performMultiPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2AndPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3AndPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e470dae1923b725db4a6325f7e508725a0788605111a376c7a6c2ee2fc9e8ff",
  "receipt": {
    "to": null,
    "from": "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
    "contractAddress": "0x229C76049b205436D49705922782Bfb182e26676",
    "transactionIndex": 19,
    "gasUsed": "1893356",
    "logsBloom": "0x
    "blockHash": "0xcfe0b0b0b2bde3be619f5a3699a66f55918e91efd6e6d17abe683908b24d91f6",
    "transactionHash": "0x9e470dae1923b725db4a6325f7e508725a0788605111a376c7a6c2ee2fc9e8ff",
    "logs": [],
    "blockNumber": 10740859,
    "cumulativeGasUsed": "18637707",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7b9463e8033fe65e92675ad404da0ba8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPaymentFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"SwapRouterChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address[]\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performMultiPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2AndPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3AndPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Think and Dev Team\",\"kind\":\"dev\",\"methods\":{\"approveTokens(address[])\":{\"params\":{\"_erc20TokenOrigin\":\"ERC20 token address to approve.\"}},\"initialize(address,bool,address,uint256)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"params\":{\"_payments\":\"The array of the Payment data.\"}},\"performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"Percentage that will be charged.\"}},\"setFeeAddress(address)\":{\"params\":{\"_feeAddress\":\"Address that will receive the fees.\"}},\"setSwapRouter(address,bool)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Think and Dev Paymentbox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveTokens(address[])\":{\"notice\":\"Approves the following token to be used on swapRouter\"},\"isSwapV2()\":{\"notice\":\"Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"notice\":\"Perform the payments to the given addresses and amounts, public method.\"},\"performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 to the given token addresses and amounts.\"},\"performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 and the transfer to the given addresses using Uniswap V2 interface.Currently the function only works with ERC20 tokens.\"},\"performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])\":{\"notice\":\"Perform the swap with Uniswap V3 to the given token addresses and amounts.\"},\"performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V3 and the transfer to the given addresses.Currently the function only works with ERC20 tokens.\"},\"setFee(uint256)\":{\"notice\":\"Set the fee that will be charged, fees are divided by mantissa\"},\"setFeeAddress(address)\":{\"notice\":\"Set the address that will receive the fees.\"},\"setSwapRouter(address,bool)\":{\"notice\":\"Set the SwapRouter and the version to be used.\"},\"swapRouter()\":{\"notice\":\"Returns the address of the Uniswap protocol router, it could be v2 or v3.\"}},\"notice\":\"Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payroll.sol\":\"Payroll\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\\\"t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\\\"re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\\\"s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\\\"s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x10d6970171336bca4c49a63eadbb0aa851b250efc51066ff1ffe77de4254665e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"./interfaces/IUniswap.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./BytesLib.sol\\\";\\n\\n/**\\n * @title Think and Dev Paymentbox\\n * @author Think and Dev Team\\n * @notice Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction.\\n * Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\\n */\\ncontract Payroll is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using BytesLib for bytes;\\n    /**\\n     * Returns the address of the Uniswap protocol router, it could be v2 or v3.\\n     */\\n    address public swapRouter;\\n    address public feeAddress;\\n    uint256 public fee;\\n    uint256 public constant MANTISSA = 1e18;\\n\\n    /**\\n     * Returns if the contract is working with a v2 Uniswap protocol;\\n     * true means v2, false means v3.\\n     */\\n    bool public isSwapV2;\\n\\n    struct Payment {\\n        address token;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n\\n    struct SwapV2 {\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        address[] path;\\n    }\\n\\n    struct SwapV3 {\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        bytes path;\\n    }\\n\\n    event SwapRouterChanged(address _swapRouter, bool _isSwapV2);\\n    event FeeChanged(uint256 _fee);\\n    event FeeCharged(address _erc20TokenAddress, address _feeAddress, uint256 _fees);\\n    event FeeAddressChanged(address _feeAddress);\\n    event BatchPaymentFinished(address _erc20TokenAddress, address[] _receivers, uint256[] _amountsToTransfer);\\n    event SwapFinished(address _tokenIn, address _tokenOut, uint256 _amountReceived);\\n\\n    /**\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function initialize(\\n        address _swapRouter,\\n        bool _isSwapV2,\\n        address _feeAddress,\\n        uint256 _fee\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n        _setFeeAddress(_feeAddress);\\n        _setFee(_fee);\\n    }\\n\\n    /**\\n     * Set the fee that will be charged, fees are divided by mantissa\\n     * @param _fee Percentage that will be charged.\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    function _setFee(uint256 _fee) internal {\\n        require(_fee < 3e16, \\\"Payroll: Fee should be less than 3%\\\");\\n        fee = _fee;\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n     * Set the address that will receive the fees.\\n     * @param _feeAddress Address that will receive the fees.\\n     */\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        _setFeeAddress(_feeAddress);\\n    }\\n\\n    function _setFeeAddress(address _feeAddress) internal {\\n        require(_feeAddress != address(0), \\\"Payroll: Fee address can't be 0\\\");\\n        feeAddress = _feeAddress;\\n        emit FeeAddressChanged(_feeAddress);\\n    }\\n\\n    /**\\n     * Set the SwapRouter and the version to be used.\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function setSwapRouter(address _swapRouter, bool _isSwapV2) external onlyOwner {\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n    }\\n\\n    function _setSwapRouter(address _swapRouter, bool _isSwapV2) internal {\\n        require(_swapRouter != address(0), \\\"Payroll: Cannot set a 0 address as swapRouter\\\");\\n        isSwapV2 = _isSwapV2;\\n        swapRouter = _swapRouter;\\n        emit SwapRouterChanged(_swapRouter, _isSwapV2);\\n    }\\n\\n    /**\\n     * Approves the following token to be used on swapRouter\\n     * @param _erc20TokenOrigin ERC20 token address to approve.\\n     */\\n    function approveTokens(address[] calldata _erc20TokenOrigin) external nonReentrant {\\n        for (uint256 i = 0; i < _erc20TokenOrigin.length; i++) {\\n            // approves the swapRouter to spend totalAmountToSpend of erc20TokenOrigin\\n            TransferHelper.safeApprove(_erc20TokenOrigin[i], address(swapRouter), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 and the transfer to the given addresses.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Currently the function only works with ERC20 tokens.\\n     */\\n    function performSwapV3AndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external nonReentrant {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV3(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function performSwapV3(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) external nonReentrant returns (uint256) {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        return _performSwapV3(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function _performSwapV3(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) internal returns (uint256) {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n\\n        uint256 totalAmountIn = 0;\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            uint256 amountIn = IUniswapV3(swapRouter).exactOutput(\\n                IUniswapV3.ExactOutputParams({\\n                    path: _swaps[i].path,\\n                    recipient: msg.sender,\\n                    deadline: _deadline,\\n                    amountOut: _swaps[i].amountOut,\\n                    amountInMaximum: _swaps[i].amountInMax\\n                })\\n            );\\n            totalAmountIn = totalAmountIn + amountIn;\\n            emit SwapFinished(_erc20TokenOrigin, _swaps[i].path.toAddress(0), amountIn);\\n        }\\n\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n        return totalAmountIn;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 and the transfer to the given addresses using Uniswap V2 interface.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Currently the function only works with ERC20 tokens.\\n     */\\n    function performSwapV2AndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external nonReentrant {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV2(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function performSwapV2(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) external nonReentrant returns (uint256) {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        return _performSwapV2(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function _performSwapV2(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) internal returns (uint256) {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n\\n        uint256 totalAmountIn = 0;\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            require(_swaps[i].path[0] == _erc20TokenOrigin, \\\"Payroll: Swap not token origin\\\");\\n            // return the amount spend of tokenIn\\n            uint256 amountIn = IUniswapV2(swapRouter).swapTokensForExactTokens(\\n                _swaps[i].amountOut,\\n                _swaps[i].amountInMax,\\n                _swaps[i].path,\\n                msg.sender,\\n                _deadline\\n            )[0];\\n            totalAmountIn = totalAmountIn + amountIn;\\n            emit SwapFinished(_erc20TokenOrigin, _swaps[i].path[_swaps.length - 1], amountIn);\\n        }\\n\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n        return totalAmountIn;\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, public method.\\n     * @param _payments The array of the Payment data.\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) external nonReentrant {\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, internal method.\\n     * @param _payments The array of the Payment data.\\n     */\\n    function _performMultiPayment(Payment[] calldata _payments) internal {\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            _performPayment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n        }\\n    }\\n\\n    /**\\n     * Performs the payment to the given addresses.\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer.\\n     * @param _receivers The array of payment receivers.\\n     * @param _amountsToTransfer The array of payments' amounts to perform.\\n     * The amount will be transfered to the address on _receivers with the same index.\\n     */\\n    function _performPayment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        require(_erc20TokenAddress != address(0), \\\"Payroll: Token is 0 address\\\");\\n        require(_amountsToTransfer.length > 0, \\\"Payroll: No amounts to transfer\\\");\\n        require(_amountsToTransfer.length == _receivers.length, \\\"Payroll: Arrays must have same length\\\");\\n\\n        uint256 acumulatedFee = 0;\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Payroll: Cannot send to a 0 address\\\");\\n            acumulatedFee = acumulatedFee + (_amountsToTransfer[i] * fee) / MANTISSA;\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, _receivers[i], _amountsToTransfer[i]);\\n        }\\n        emit BatchPaymentFinished(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n        if (acumulatedFee > 0) {\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, feeAddress, acumulatedFee);\\n        }\\n        emit FeeCharged(_erc20TokenAddress, feeAddress, acumulatedFee);\\n    }\\n}\\n\",\"keccak256\":\"0xcf396bd2d4a43e7dcf39147334913d529ca731187245030a9911503bf10c9103\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title UniswapV2\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapV2 {\\n    //Uniswap V2\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n/**\\n * @title UniswapV2\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapV3 {\\n    //UniswapV3\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x520ba6f148709362aae39799567086031478ee08f7bb1f3df9dcbd28a3db89f5\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612148806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806392721482116100a2578063db9d033411610071578063db9d03341461022e578063ddca3f4314610241578063ef6aa2641461024a578063f2fde38b1461025d578063f65a83cf1461027057600080fd5b806392721482146101e2578063ac43070b146101f5578063c31c9c0714610208578063d8ca72361461021b57600080fd5b806369fe0e2d116100e957806369fe0e2d14610190578063715018a6146101a35780638705fcd4146101ab578063887a622a146101be5780638da5cb5b146101d157600080fd5b80632171dcc91461011b5780632703984c14610130578063395ae6a3146101525780634127535814610165575b600080fd5b61012e6101293660046119b5565b61028d565b005b61013f670de0b6b3a764000081565b6040519081526020015b60405180910390f35b61012e610160366004611a4c565b6102ce565b609854610178906001600160a01b031681565b6040516001600160a01b039091168152602001610149565b61012e61019e366004611ae7565b61036f565b61012e6103a5565b61012e6101b9366004611b00565b6103db565b61013f6101cc366004611b22565b61040e565b6033546001600160a01b0316610178565b61012e6101f0366004611a4c565b6104e3565b61012e610203366004611b91565b610569565b609754610178906001600160a01b031681565b61013f610229366004611b22565b6105f6565b61012e61023c366004611b91565b6106bd565b61013f60995481565b61012e610258366004611bd3565b6106f8565b61012e61026b366004611b00565b6107e1565b609a5461027d9060ff1681565b6040519015158152602001610149565b6033546001600160a01b031633146102c05760405162461bcd60e51b81526004016102b790611c20565b60405180910390fd5b6102ca8282610879565b5050565b600260655414156102f15760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff16156103425760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016102b7565b8215610357576103558787878787610952565b505b6103618282610cb0565b505060016065555050505050565b6033546001600160a01b031633146103995760405162461bcd60e51b81526004016102b790611c20565b6103a281610d70565b50565b6033546001600160a01b031633146103cf5760405162461bcd60e51b81526004016102b790611c20565b6103d96000610e0e565b565b6033546001600160a01b031633146104055760405162461bcd60e51b81526004016102b790611c20565b6103a281610e60565b6000600260655414156104335760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff166104835760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016102b7565b816104c75760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016102b7565b6104d48686868686610f04565b60016065559695505050505050565b600260655414156105065760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff166105565760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016102b7565b8215610357576103558787878787610f04565b6002606554141561058c5760405162461bcd60e51b81526004016102b790611c55565b600260655560005b818110156105ec576105da8383838181106105b1576105b1611c8c565b90506020020160208101906105c69190611b00565b6097546001600160a01b0316600019611233565b806105e481611cb8565b915050610594565b5050600160655550565b60006002606554141561061b5760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff161561066c5760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016102b7565b816106b05760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016102b7565b6104d48686868686610952565b600260655414156106e05760405162461bcd60e51b81526004016102b790611c55565b60026065556106ef8282610cb0565b50506001606555565b600054610100900460ff166107135760005460ff1615610717565b303b155b61077a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102b7565b600054610100900460ff1615801561079c576000805461ffff19166101011790555b6107a461132c565b6107ac61135b565b6107b68585610879565b6107bf83610e60565b6107c882610d70565b80156107da576000805461ff00191690555b5050505050565b6033546001600160a01b0316331461080b5760405162461bcd60e51b81526004016102b790611c20565b6001600160a01b0381166108705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b7565b6103a281610e0e565b6001600160a01b0382166108e55760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b60648201526084016102b7565b609a805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b60006109608633308861138a565b6000805b83811015610c1757600085858381811061098057610980611c8c565b90506020028101906109929190611cd3565b6109a0906040810190611cf3565b9050116109e55760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016102b7565b6097546040805160a081019091526000916001600160a01b03169063f28c04989080898987818110610a1957610a19611c8c565b9050602002810190610a2b9190611cd3565b610a39906040810190611cf3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b166040820152606001898987818110610a9757610a97611c8c565b9050602002810190610aa99190611cd3565b358152602001898987818110610ac157610ac1611c8c565b9050602002810190610ad39190611cd3565b602001358152506040518263ffffffff1660e01b8152600401610af69190611d6a565b602060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611dd9565b9050610b548184611df2565b92507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5689610bec6000898987818110610b8f57610b8f611c8c565b9050602002810190610ba19190611cd3565b610baf906040810190611cf3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114989050565b83604051610bfc93929190611e0a565b60405180910390a15080610c0f81611cb8565b915050610964565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b158015610c5a57600080fd5b505afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190611dd9565b90508015610ca557610ca588338361154c565b509695505050505050565b60005b81811015610d6b57610d59838383818110610cd057610cd0611c8c565b9050602002810190610ce29190611cd3565b610cf0906020810190611b00565b848484818110610d0257610d02611c8c565b9050602002810190610d149190611cd3565b610d22906020810190611e2e565b868686818110610d3457610d34611c8c565b9050602002810190610d469190611cd3565b610d54906040810190611e2e565b611645565b80610d6381611cb8565b915050610cb3565b505050565b666a94d74f4300008110610dd25760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b60648201526084016102b7565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116610eb65760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e277420626520300060448201526064016102b7565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c990602001610e03565b6000610f128633308861138a565b6000805b83811015610c17576000858583818110610f3257610f32611c8c565b9050602002810190610f449190611cd3565b610f52906040810190611e2e565b905011610f975760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016102b7565b876001600160a01b0316858583818110610fb357610fb3611c8c565b9050602002810190610fc59190611cd3565b610fd3906040810190611e2e565b6000818110610fe457610fe4611c8c565b9050602002016020810190610ff99190611b00565b6001600160a01b03161461104f5760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e000060448201526064016102b7565b6097546000906001600160a01b0316638803dbee87878581811061107557611075611c8c565b90506020028101906110879190611cd3565b3588888681811061109a5761109a611c8c565b90506020028101906110ac9190611cd3565b602001358989878181106110c2576110c2611c8c565b90506020028101906110d49190611cd3565b6110e2906040810190611e2e565b338d6040518763ffffffff1660e01b815260040161110596959493929190611ebf565b600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115b9190810190611f1e565b60008151811061116d5761116d611c8c565b6020026020010151905080836111839190611df2565b92507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56898787858181106111b9576111b9611c8c565b90506020028101906111cb9190611cd3565b6111d9906040810190611e2e565b6111e460018a611fdc565b8181106111f3576111f3611c8c565b90506020020160208101906112089190611b00565b8360405161121893929190611e0a565b60405180910390a1508061122b81611cb8565b915050610f16565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161128f9190611ff3565b6000604051808303816000865af19150503d80600081146112cc576040519150601f19603f3d011682016040523d82523d6000602084013e6112d1565b606091505b50915091508180156112fb5750805115806112fb5750808060200190518101906112fb9190612005565b6107da5760405162461bcd60e51b8152602060048201526002602482015261534160f01b60448201526064016102b7565b600054610100900460ff166113535760405162461bcd60e51b81526004016102b790612022565b6103d961192d565b600054610100900460ff166113825760405162461bcd60e51b81526004016102b790612022565b6103d961195b565b600080856001600160a01b03166323b872dd60e01b8686866040516024016113b493929190611e0a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516113f29190611ff3565b6000604051808303816000865af19150503d806000811461142f576040519150601f19603f3d011682016040523d82523d6000602084013e611434565b606091505b509150915081801561145e57508051158061145e57508080602001905181019061145e9190612005565b6114905760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016102b7565b505050505050565b6000816114a6816014611df2565b10156114e95760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016102b7565b6114f4826014611df2565b8351101561153c5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016102b7565b500160200151600160601b900490565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916115a89190611ff3565b6000604051808303816000865af19150503d80600081146115e5576040519150601f19603f3d011682016040523d82523d6000602084013e6115ea565b606091505b50915091508180156116145750805115806116145750808060200190518101906116149190612005565b6107da5760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016102b7565b6001600160a01b03851661169b5760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a20546f6b656e20697320302061646472657373000000000060448201526064016102b7565b806116e85760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e736665720060448201526064016102b7565b8083146117455760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b60648201526084016102b7565b6000805b8481101561187e57600086868381811061176557611765611c8c565b905060200201602081019061177a9190611b00565b6001600160a01b031614156117dd5760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260448201526265737360e81b60648201526084016102b7565b670de0b6b3a76400006099548585848181106117fb576117fb611c8c565b9050602002013561180c919061206d565b611816919061208c565b6118209083611df2565b915061186c873388888581811061183957611839611c8c565b905060200201602081019061184e9190611b00565b87878681811061186057611860611c8c565b9050602002013561138a565b8061187681611cb8565b915050611749565b507f12bf982271e0dbba6878628c37389b80d96734e56444e0fa59baf971be04c1b586868686866040516118b69594939291906120ae565b60405180910390a180156118de576098546118de90879033906001600160a01b03168461138a565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d9161191d9189916001600160a01b0316908590611e0a565b60405180910390a1505050505050565b600054610100900460ff166119545760405162461bcd60e51b81526004016102b790612022565b6001606555565b600054610100900460ff166119825760405162461bcd60e51b81526004016102b790612022565b6103d933610e0e565b80356001600160a01b03811681146119a257600080fd5b919050565b80151581146103a257600080fd5b600080604083850312156119c857600080fd5b6119d18361198b565b915060208301356119e1816119a7565b809150509250929050565b803563ffffffff811681146119a257600080fd5b60008083601f840112611a1257600080fd5b50813567ffffffffffffffff811115611a2a57600080fd5b6020830191508360208260051b8501011115611a4557600080fd5b9250929050565b600080600080600080600060a0888a031215611a6757600080fd5b611a708861198b565b965060208801359550611a85604089016119ec565b9450606088013567ffffffffffffffff80821115611aa257600080fd5b611aae8b838c01611a00565b909650945060808a0135915080821115611ac757600080fd5b50611ad48a828b01611a00565b989b979a50959850939692959293505050565b600060208284031215611af957600080fd5b5035919050565b600060208284031215611b1257600080fd5b611b1b8261198b565b9392505050565b600080600080600060808688031215611b3a57600080fd5b611b438661198b565b945060208601359350611b58604087016119ec565b9250606086013567ffffffffffffffff811115611b7457600080fd5b611b8088828901611a00565b969995985093965092949392505050565b60008060208385031215611ba457600080fd5b823567ffffffffffffffff811115611bbb57600080fd5b611bc785828601611a00565b90969095509350505050565b60008060008060808587031215611be957600080fd5b611bf28561198b565b93506020850135611c02816119a7565b9250611c106040860161198b565b9396929550929360600135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611ccc57611ccc611ca2565b5060010190565b60008235605e19833603018112611ce957600080fd5b9190910192915050565b6000808335601e19843603018112611d0a57600080fd5b83018035915067ffffffffffffffff821115611d2557600080fd5b602001915036819003821315611a4557600080fd5b60005b83811015611d55578181015183820152602001611d3d565b83811115611d64576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611d928160e0860160208501611d3a565b60018060a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b600060208284031215611deb57600080fd5b5051919050565b60008219821115611e0557611e05611ca2565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000808335601e19843603018112611e4557600080fd5b83018035915067ffffffffffffffff821115611e6057600080fd5b6020019150600581901b3603821315611a4557600080fd5b8183526000602080850194508260005b85811015611eb4576001600160a01b03611ea18361198b565b1687529582019590820190600101611e88565b509495945050505050565b86815285602082015260a060408201526000611edf60a083018688611e78565b6001600160a01b039490941660608301525063ffffffff91909116608090910152949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611f3157600080fd5b825167ffffffffffffffff80821115611f4957600080fd5b818501915085601f830112611f5d57600080fd5b815181811115611f6f57611f6f611f08565b8060051b604051601f19603f83011681018181108582111715611f9457611f94611f08565b604052918252848201925083810185019188831115611fb257600080fd5b938501935b82851015611fd057845184529385019392850192611fb7565b98975050505050505050565b600082821015611fee57611fee611ca2565b500390565b60008251611ce9818460208701611d3a565b60006020828403121561201757600080fd5b8151611b1b816119a7565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561208757612087611ca2565b500290565b6000826120a957634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03861681526060602082018190526000906120d39083018688611e78565b82810360408401528381526001600160fb1b038411156120f257600080fd5b8360051b808660208401376000910160200190815297965050505050505056fea2646970667358221220d87fe75f6e2aa4324fcab4d74b9aeec28c956f03a31c75a0cd9bd6f107a539f764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806392721482116100a2578063db9d033411610071578063db9d03341461022e578063ddca3f4314610241578063ef6aa2641461024a578063f2fde38b1461025d578063f65a83cf1461027057600080fd5b806392721482146101e2578063ac43070b146101f5578063c31c9c0714610208578063d8ca72361461021b57600080fd5b806369fe0e2d116100e957806369fe0e2d14610190578063715018a6146101a35780638705fcd4146101ab578063887a622a146101be5780638da5cb5b146101d157600080fd5b80632171dcc91461011b5780632703984c14610130578063395ae6a3146101525780634127535814610165575b600080fd5b61012e6101293660046119b5565b61028d565b005b61013f670de0b6b3a764000081565b6040519081526020015b60405180910390f35b61012e610160366004611a4c565b6102ce565b609854610178906001600160a01b031681565b6040516001600160a01b039091168152602001610149565b61012e61019e366004611ae7565b61036f565b61012e6103a5565b61012e6101b9366004611b00565b6103db565b61013f6101cc366004611b22565b61040e565b6033546001600160a01b0316610178565b61012e6101f0366004611a4c565b6104e3565b61012e610203366004611b91565b610569565b609754610178906001600160a01b031681565b61013f610229366004611b22565b6105f6565b61012e61023c366004611b91565b6106bd565b61013f60995481565b61012e610258366004611bd3565b6106f8565b61012e61026b366004611b00565b6107e1565b609a5461027d9060ff1681565b6040519015158152602001610149565b6033546001600160a01b031633146102c05760405162461bcd60e51b81526004016102b790611c20565b60405180910390fd5b6102ca8282610879565b5050565b600260655414156102f15760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff16156103425760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016102b7565b8215610357576103558787878787610952565b505b6103618282610cb0565b505060016065555050505050565b6033546001600160a01b031633146103995760405162461bcd60e51b81526004016102b790611c20565b6103a281610d70565b50565b6033546001600160a01b031633146103cf5760405162461bcd60e51b81526004016102b790611c20565b6103d96000610e0e565b565b6033546001600160a01b031633146104055760405162461bcd60e51b81526004016102b790611c20565b6103a281610e60565b6000600260655414156104335760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff166104835760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016102b7565b816104c75760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016102b7565b6104d48686868686610f04565b60016065559695505050505050565b600260655414156105065760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff166105565760405162461bcd60e51b81526020600482015260166024820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b60448201526064016102b7565b8215610357576103558787878787610f04565b6002606554141561058c5760405162461bcd60e51b81526004016102b790611c55565b600260655560005b818110156105ec576105da8383838181106105b1576105b1611c8c565b90506020020160208101906105c69190611b00565b6097546001600160a01b0316600019611233565b806105e481611cb8565b915050610594565b5050600160655550565b60006002606554141561061b5760405162461bcd60e51b81526004016102b790611c55565b6002606555609a5460ff161561066c5760405162461bcd60e51b8152602060048201526016602482015275506179726f6c6c3a204e6f7420756e6973776170563360501b60448201526064016102b7565b816106b05760405162461bcd60e51b8152602060048201526014602482015273506179726f6c6c3a20456d70747920737761707360601b60448201526064016102b7565b6104d48686868686610952565b600260655414156106e05760405162461bcd60e51b81526004016102b790611c55565b60026065556106ef8282610cb0565b50506001606555565b600054610100900460ff166107135760005460ff1615610717565b303b155b61077a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102b7565b600054610100900460ff1615801561079c576000805461ffff19166101011790555b6107a461132c565b6107ac61135b565b6107b68585610879565b6107bf83610e60565b6107c882610d70565b80156107da576000805461ff00191690555b5050505050565b6033546001600160a01b0316331461080b5760405162461bcd60e51b81526004016102b790611c20565b6001600160a01b0381166108705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b7565b6103a281610e0e565b6001600160a01b0382166108e55760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b60648201526084016102b7565b609a805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b60006109608633308861138a565b6000805b83811015610c1757600085858381811061098057610980611c8c565b90506020028101906109929190611cd3565b6109a0906040810190611cf3565b9050116109e55760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016102b7565b6097546040805160a081019091526000916001600160a01b03169063f28c04989080898987818110610a1957610a19611c8c565b9050602002810190610a2b9190611cd3565b610a39906040810190611cf3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b166040820152606001898987818110610a9757610a97611c8c565b9050602002810190610aa99190611cd3565b358152602001898987818110610ac157610ac1611c8c565b9050602002810190610ad39190611cd3565b602001358152506040518263ffffffff1660e01b8152600401610af69190611d6a565b602060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190611dd9565b9050610b548184611df2565b92507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5689610bec6000898987818110610b8f57610b8f611c8c565b9050602002810190610ba19190611cd3565b610baf906040810190611cf3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114989050565b83604051610bfc93929190611e0a565b60405180910390a15080610c0f81611cb8565b915050610964565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b158015610c5a57600080fd5b505afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190611dd9565b90508015610ca557610ca588338361154c565b509695505050505050565b60005b81811015610d6b57610d59838383818110610cd057610cd0611c8c565b9050602002810190610ce29190611cd3565b610cf0906020810190611b00565b848484818110610d0257610d02611c8c565b9050602002810190610d149190611cd3565b610d22906020810190611e2e565b868686818110610d3457610d34611c8c565b9050602002810190610d469190611cd3565b610d54906040810190611e2e565b611645565b80610d6381611cb8565b915050610cb3565b505050565b666a94d74f4300008110610dd25760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b60648201526084016102b7565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116610eb65760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e277420626520300060448201526064016102b7565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c990602001610e03565b6000610f128633308861138a565b6000805b83811015610c17576000858583818110610f3257610f32611c8c565b9050602002810190610f449190611cd3565b610f52906040810190611e2e565b905011610f975760405162461bcd60e51b81526020600482015260136024820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b60448201526064016102b7565b876001600160a01b0316858583818110610fb357610fb3611c8c565b9050602002810190610fc59190611cd3565b610fd3906040810190611e2e565b6000818110610fe457610fe4611c8c565b9050602002016020810190610ff99190611b00565b6001600160a01b03161461104f5760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e000060448201526064016102b7565b6097546000906001600160a01b0316638803dbee87878581811061107557611075611c8c565b90506020028101906110879190611cd3565b3588888681811061109a5761109a611c8c565b90506020028101906110ac9190611cd3565b602001358989878181106110c2576110c2611c8c565b90506020028101906110d49190611cd3565b6110e2906040810190611e2e565b338d6040518763ffffffff1660e01b815260040161110596959493929190611ebf565b600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115b9190810190611f1e565b60008151811061116d5761116d611c8c565b6020026020010151905080836111839190611df2565b92507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56898787858181106111b9576111b9611c8c565b90506020028101906111cb9190611cd3565b6111d9906040810190611e2e565b6111e460018a611fdc565b8181106111f3576111f3611c8c565b90506020020160208101906112089190611b00565b8360405161121893929190611e0a565b60405180910390a1508061122b81611cb8565b915050610f16565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161128f9190611ff3565b6000604051808303816000865af19150503d80600081146112cc576040519150601f19603f3d011682016040523d82523d6000602084013e6112d1565b606091505b50915091508180156112fb5750805115806112fb5750808060200190518101906112fb9190612005565b6107da5760405162461bcd60e51b8152602060048201526002602482015261534160f01b60448201526064016102b7565b600054610100900460ff166113535760405162461bcd60e51b81526004016102b790612022565b6103d961192d565b600054610100900460ff166113825760405162461bcd60e51b81526004016102b790612022565b6103d961195b565b600080856001600160a01b03166323b872dd60e01b8686866040516024016113b493929190611e0a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516113f29190611ff3565b6000604051808303816000865af19150503d806000811461142f576040519150601f19603f3d011682016040523d82523d6000602084013e611434565b606091505b509150915081801561145e57508051158061145e57508080602001905181019061145e9190612005565b6114905760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016102b7565b505050505050565b6000816114a6816014611df2565b10156114e95760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016102b7565b6114f4826014611df2565b8351101561153c5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016102b7565b500160200151600160601b900490565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916115a89190611ff3565b6000604051808303816000865af19150503d80600081146115e5576040519150601f19603f3d011682016040523d82523d6000602084013e6115ea565b606091505b50915091508180156116145750805115806116145750808060200190518101906116149190612005565b6107da5760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016102b7565b6001600160a01b03851661169b5760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a20546f6b656e20697320302061646472657373000000000060448201526064016102b7565b806116e85760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e736665720060448201526064016102b7565b8083146117455760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b60648201526084016102b7565b6000805b8481101561187e57600086868381811061176557611765611c8c565b905060200201602081019061177a9190611b00565b6001600160a01b031614156117dd5760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260448201526265737360e81b60648201526084016102b7565b670de0b6b3a76400006099548585848181106117fb576117fb611c8c565b9050602002013561180c919061206d565b611816919061208c565b6118209083611df2565b915061186c873388888581811061183957611839611c8c565b905060200201602081019061184e9190611b00565b87878681811061186057611860611c8c565b9050602002013561138a565b8061187681611cb8565b915050611749565b507f12bf982271e0dbba6878628c37389b80d96734e56444e0fa59baf971be04c1b586868686866040516118b69594939291906120ae565b60405180910390a180156118de576098546118de90879033906001600160a01b03168461138a565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d9161191d9189916001600160a01b0316908590611e0a565b60405180910390a1505050505050565b600054610100900460ff166119545760405162461bcd60e51b81526004016102b790612022565b6001606555565b600054610100900460ff166119825760405162461bcd60e51b81526004016102b790612022565b6103d933610e0e565b80356001600160a01b03811681146119a257600080fd5b919050565b80151581146103a257600080fd5b600080604083850312156119c857600080fd5b6119d18361198b565b915060208301356119e1816119a7565b809150509250929050565b803563ffffffff811681146119a257600080fd5b60008083601f840112611a1257600080fd5b50813567ffffffffffffffff811115611a2a57600080fd5b6020830191508360208260051b8501011115611a4557600080fd5b9250929050565b600080600080600080600060a0888a031215611a6757600080fd5b611a708861198b565b965060208801359550611a85604089016119ec565b9450606088013567ffffffffffffffff80821115611aa257600080fd5b611aae8b838c01611a00565b909650945060808a0135915080821115611ac757600080fd5b50611ad48a828b01611a00565b989b979a50959850939692959293505050565b600060208284031215611af957600080fd5b5035919050565b600060208284031215611b1257600080fd5b611b1b8261198b565b9392505050565b600080600080600060808688031215611b3a57600080fd5b611b438661198b565b945060208601359350611b58604087016119ec565b9250606086013567ffffffffffffffff811115611b7457600080fd5b611b8088828901611a00565b969995985093965092949392505050565b60008060208385031215611ba457600080fd5b823567ffffffffffffffff811115611bbb57600080fd5b611bc785828601611a00565b90969095509350505050565b60008060008060808587031215611be957600080fd5b611bf28561198b565b93506020850135611c02816119a7565b9250611c106040860161198b565b9396929550929360600135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611ccc57611ccc611ca2565b5060010190565b60008235605e19833603018112611ce957600080fd5b9190910192915050565b6000808335601e19843603018112611d0a57600080fd5b83018035915067ffffffffffffffff821115611d2557600080fd5b602001915036819003821315611a4557600080fd5b60005b83811015611d55578181015183820152602001611d3d565b83811115611d64576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611d928160e0860160208501611d3a565b60018060a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b600060208284031215611deb57600080fd5b5051919050565b60008219821115611e0557611e05611ca2565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000808335601e19843603018112611e4557600080fd5b83018035915067ffffffffffffffff821115611e6057600080fd5b6020019150600581901b3603821315611a4557600080fd5b8183526000602080850194508260005b85811015611eb4576001600160a01b03611ea18361198b565b1687529582019590820190600101611e88565b509495945050505050565b86815285602082015260a060408201526000611edf60a083018688611e78565b6001600160a01b039490941660608301525063ffffffff91909116608090910152949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611f3157600080fd5b825167ffffffffffffffff80821115611f4957600080fd5b818501915085601f830112611f5d57600080fd5b815181811115611f6f57611f6f611f08565b8060051b604051601f19603f83011681018181108582111715611f9457611f94611f08565b604052918252848201925083810185019188831115611fb257600080fd5b938501935b82851015611fd057845184529385019392850192611fb7565b98975050505050505050565b600082821015611fee57611fee611ca2565b500390565b60008251611ce9818460208701611d3a565b60006020828403121561201757600080fd5b8151611b1b816119a7565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561208757612087611ca2565b500290565b6000826120a957634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03861681526060602082018190526000906120d39083018688611e78565b82810360408401528381526001600160fb1b038411156120f257600080fd5b8360051b808660208401376000910160200190815297965050505050505056fea2646970667358221220d87fe75f6e2aa4324fcab4d74b9aeec28c956f03a31c75a0cd9bd6f107a539f764736f6c63430008090033",
  "devdoc": {
    "author": "Think and Dev Team",
    "kind": "dev",
    "methods": {
      "approveTokens(address[])": {
        "params": {
          "_erc20TokenOrigin": "ERC20 token address to approve."
        }
      },
      "initialize(address,bool,address,uint256)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "params": {
          "_payments": "The array of the Payment data."
        }
      },
      "performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "Percentage that will be charged."
        }
      },
      "setFeeAddress(address)": {
        "params": {
          "_feeAddress": "Address that will receive the fees."
        }
      },
      "setSwapRouter(address,bool)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Think and Dev Paymentbox",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveTokens(address[])": {
        "notice": "Approves the following token to be used on swapRouter"
      },
      "isSwapV2()": {
        "notice": "Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "notice": "Perform the payments to the given addresses and amounts, public method."
      },
      "performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])": {
        "notice": "Perform the swap with Uniswap V2 to the given token addresses and amounts."
      },
      "performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V2 and the transfer to the given addresses using Uniswap V2 interface.Currently the function only works with ERC20 tokens."
      },
      "performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])": {
        "notice": "Perform the swap with Uniswap V3 to the given token addresses and amounts."
      },
      "performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V3 and the transfer to the given addresses.Currently the function only works with ERC20 tokens."
      },
      "setFee(uint256)": {
        "notice": "Set the fee that will be charged, fees are divided by mantissa"
      },
      "setFeeAddress(address)": {
        "notice": "Set the address that will receive the fees."
      },
      "setSwapRouter(address,bool)": {
        "notice": "Set the SwapRouter and the version to be used."
      },
      "swapRouter()": {
        "notice": "Returns the address of the Uniswap protocol router, it could be v2 or v3."
      }
    },
    "notice": "Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3115,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "swapRouter",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3117,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "feeAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3119,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "fee",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 3125,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "isSwapV2",
        "offset": 0,
        "slot": "154",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}