{
  "address": "0xE34F957E42a3a2B5F8A64Ee367851a088bd1426A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "FeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "SwapRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "UpdatedVersion",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MANTISSA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20TokenOrigin",
          "type": "address[]"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapV2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performMultiPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2AndPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2AndPaymentETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Payroll.SwapV2[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV2ETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3AndPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3AndPaymentETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            }
          ],
          "internalType": "struct Payroll.SwapV3[]",
          "name": "_swaps",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapV3ETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "setVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x471bcbf402baae01d5917f486544ad3bcfb92c8615bf67c103dd7cff4694b687",
  "receipt": {
    "to": null,
    "from": "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
    "contractAddress": "0xE34F957E42a3a2B5F8A64Ee367851a088bd1426A",
    "transactionIndex": 0,
    "gasUsed": "4293415",
    "logsBloom": "0x
    "blockHash": "0x4d598ff02f802831dc6c5ab3139e6f40c10aa1524fb71cc0b92aefafe7c7af15",
    "transactionHash": "0x471bcbf402baae01d5917f486544ad3bcfb92c8615bf67c103dd7cff4694b687",
    "logs": [],
    "blockNumber": 20231003,
    "cumulativeGasUsed": "4293415",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bb0336ed25787785bc01981e95bc259b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"SwapRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"UpdatedVersion\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address[]\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performMultiPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2AndPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2AndPaymentETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Payroll.SwapV2[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV2ETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3AndPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3AndPaymentETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct Payroll.SwapV3[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"}],\"name\":\"performSwapV3ETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Think and Dev Team\",\"kind\":\"dev\",\"methods\":{\"approveTokens(address[])\":{\"params\":{\"_erc20TokenOrigin\":\"ERC20 token address to approve.\"}},\"initialize(address,bool,address,uint256)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"params\":{\"_payments\":\"The array of the Payment data.\"}},\"performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV2AndPaymentETH(uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV2ETH(uint256,uint32,(uint256,uint256,address[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3AndPaymentETH(uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"performSwapV3ETH(uint256,uint32,(uint256,uint256,bytes)[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"Percentage that will be charged.\"}},\"setFeeAddress(address)\":{\"params\":{\"_feeAddress\":\"Address that will receive the fees.\"}},\"setSwapRouter(address,bool)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Think and Dev Paymentbox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveTokens(address[])\":{\"notice\":\"Approves the following token to be used on swapRouter\"},\"isSwapV2()\":{\"notice\":\"Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"notice\":\"Perform the payments to the given addresses and amounts, public method.Available to send ETH or ERC20.\"},\"performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 to the given token addresses and amounts.Swap ERC20 to ERC20.\"},\"performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 and the transfer to the given addresses.Swap ERC20 to ERC20.Available to send ETH or ERC20.\"},\"performSwapV2AndPaymentETH(uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 and the transfer to the given addresses.Swap ETH to ERC20.Available to send ETH or ERC20.\"},\"performSwapV2ETH(uint256,uint32,(uint256,uint256,address[])[])\":{\"notice\":\"Perform the swap with Uniswap V2 to the given token addresses and amounts.Swap ETH to ERC20.\"},\"performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])\":{\"notice\":\"Perform the swap with Uniswap V3 to the given token addresses and amounts.Swap ERC20 to ERC20.\"},\"performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V3 and the transfer to the given addresses.Swap ERC20 to ERC20.Available to send ETH or ERC20.\"},\"performSwapV3AndPaymentETH(uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap with Uniswap V3 and the transfer to the given addresses.Swap ETH to ERC20.Available to send ETH or ERC20.\"},\"performSwapV3ETH(uint256,uint32,(uint256,uint256,bytes)[])\":{\"notice\":\"Perform the swap with Uniswap V3 to the given token addresses and amounts.Swap ETH to ERC20.\"},\"setFee(uint256)\":{\"notice\":\"Set the fee that will be charged, fees are divided by mantissa\"},\"setFeeAddress(address)\":{\"notice\":\"Set the address that will receive the fees.\"},\"setSwapRouter(address,bool)\":{\"notice\":\"Set the SwapRouter and the version to be used.\"},\"swapRouter()\":{\"notice\":\"Returns the address of the Uniswap protocol router, it could be v2 or v3.\"}},\"notice\":\"Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PayrollIotex.sol\":\"PayrollIotex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\\\"t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\\\"re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\\\"s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\\\"s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x10d6970171336bca4c49a63eadbb0aa851b250efc51066ff1ffe77de4254665e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswap.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./BytesLib.sol\\\";\\n\\n/**\\n * @title Think and Dev Paymentbox\\n * @author Think and Dev Team\\n * @notice Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction.\\n * Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\\n */\\ncontract Payroll is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using BytesLib for bytes;\\n    /**\\n     * Returns the address of the Uniswap protocol router, it could be v2 or v3.\\n     */\\n    address public swapRouter;\\n    address public feeAddress;\\n    uint256 public fee;\\n    uint256 public constant MANTISSA = 1e18;\\n    uint256 public version;\\n\\n    /**\\n     * Returns if the contract is working with a v2 Uniswap protocol;\\n     * true means v2, false means v3.\\n     */\\n    bool public isSwapV2;\\n\\n    struct Payment {\\n        address token;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n\\n    struct SwapV2 {\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        address[] path;\\n    }\\n\\n    struct SwapV3 {\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        bytes path;\\n    }\\n\\n    event SwapRouterChanged(address _swapRouter, bool _isSwapV2);\\n    event FeeChanged(uint256 _fee);\\n    event UpdatedVersion(uint256 _version);\\n    event FeeCharged(address _erc20TokenAddress, address _feeAddress, uint256 _fees);\\n    event FeeAddressChanged(address _feeAddress);\\n    event BatchPayment(address _erc20TokenAddress, address[] _receivers, uint256[] _amountsToTransfer);\\n    event SwapFinished(address _tokenIn, address _tokenOut, uint256 _amountReceived);\\n\\n    /**\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function initialize(\\n        address _swapRouter,\\n        bool _isSwapV2,\\n        address _feeAddress,\\n        uint256 _fee\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n        _setFeeAddress(_feeAddress);\\n        _setFee(_fee);\\n        _setVersion(1);\\n    }\\n\\n    /**\\n     * Set the fee that will be charged, fees are divided by mantissa\\n     * @param _fee Percentage that will be charged.\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    function setVersion(uint256 _version) external onlyOwner {\\n        _setVersion(_version);\\n    }\\n\\n    function _setVersion(uint256 _version) internal {\\n        require(_version > 0, \\\"Payroll: Version can't be 0\\\");\\n        version = _version;\\n        emit UpdatedVersion(_version);\\n    }\\n\\n    function _setFee(uint256 _fee) internal {\\n        require(_fee < 3e16, \\\"Payroll: Fee should be less than 3%\\\");\\n        fee = _fee;\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n     * Set the address that will receive the fees.\\n     * @param _feeAddress Address that will receive the fees.\\n     */\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        _setFeeAddress(_feeAddress);\\n    }\\n\\n    function _setFeeAddress(address _feeAddress) internal {\\n        require(_feeAddress != address(0), \\\"Payroll: Fee address can't be 0\\\");\\n        feeAddress = _feeAddress;\\n        emit FeeAddressChanged(_feeAddress);\\n    }\\n\\n    /**\\n     * Set the SwapRouter and the version to be used.\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function setSwapRouter(address _swapRouter, bool _isSwapV2) external onlyOwner {\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n    }\\n\\n    function _setSwapRouter(address _swapRouter, bool _isSwapV2) internal {\\n        require(_swapRouter != address(0), \\\"Payroll: Cannot set a 0 address as swapRouter\\\");\\n        isSwapV2 = _isSwapV2;\\n        swapRouter = _swapRouter;\\n        emit SwapRouterChanged(_swapRouter, _isSwapV2);\\n    }\\n\\n    /**\\n     * Approves the following token to be used on swapRouter\\n     * @param _erc20TokenOrigin ERC20 token address to approve.\\n     */\\n    function approveTokens(address[] calldata _erc20TokenOrigin) external nonReentrant {\\n        for (uint256 i = 0; i < _erc20TokenOrigin.length; i++) {\\n            // approves the swapRouter to spend totalAmountToSpend of erc20TokenOrigin\\n            TransferHelper.safeApprove(_erc20TokenOrigin[i], address(swapRouter), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 and the transfer to the given addresses.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Swap ERC20 to ERC20.\\n     * @notice Available to send ETH or ERC20.\\n     */\\n    function performSwapV3AndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external payable nonReentrant {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV3(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n        refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 and the transfer to the given addresses.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Swap ETH to ERC20.\\n     * @notice Available to send ETH or ERC20.\\n     */\\n    function performSwapV3AndPaymentETH(\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external payable nonReentrant {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV3ETH(_totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n        refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @notice Swap ERC20 to ERC20.\\n     */\\n    function performSwapV3(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) external nonReentrant {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        _performSwapV3(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V3 to the given token addresses and amounts.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @notice Swap ETH to ERC20.\\n     */\\n    function performSwapV3ETH(\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) external payable nonReentrant {\\n        require(!isSwapV2, \\\"Payroll: Not uniswapV3\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        _performSwapV3ETH(_totalAmountToSwap, _deadline, _swaps);\\n        refundETH();\\n    }\\n\\n    function _performSwapV3(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) internal {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n        // Celo does not use V3\\n        address weth = IUniswapV3(swapRouter).WETH9();\\n        uint256 amountIn = 0;\\n\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            require(\\n                _swaps[i].path.toAddress(_swaps[i].path.length - 20) == _erc20TokenOrigin,\\n                \\\"Payroll: Swap not token origin\\\"\\n            );\\n            // get the token to swap, it is at position 0 of the byte array\\n            address tokenTo = _swaps[i].path.toAddress(0);\\n\\n            if (tokenTo == weth) {\\n                // if tokenTo is WETH, the contract needs to receive it to convert it to ETH and use it in payments (if needed)\\n                // then it will be refunded to msg.sender\\n                amountIn = IUniswapV3(swapRouter).exactOutput(\\n                    IUniswapV3.ExactOutputParams({\\n                        path: _swaps[i].path,\\n                        recipient: address(this),\\n                        deadline: _deadline,\\n                        amountOut: _swaps[i].amountOut,\\n                        amountInMaximum: _swaps[i].amountInMax\\n                    })\\n                );\\n\\n                // receives WETH, so converts it to ETH\\n                IWETH(weth).withdraw(_swaps[i].amountOut);\\n            } else {\\n                // if tokenTo is any ERC20 the recipient is the msg.sender\\n                amountIn = IUniswapV3(swapRouter).exactOutput(\\n                    IUniswapV3.ExactOutputParams({\\n                        path: _swaps[i].path,\\n                        recipient: msg.sender,\\n                        deadline: _deadline,\\n                        amountOut: _swaps[i].amountOut,\\n                        amountInMaximum: _swaps[i].amountInMax\\n                    })\\n                );\\n            }\\n\\n            emit SwapFinished(_erc20TokenOrigin, tokenTo, amountIn);\\n        }\\n\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n    }\\n\\n    function _performSwapV3ETH(\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV3[] calldata _swaps\\n    ) internal {\\n        require(msg.value >= _totalAmountToSwap, \\\"Payroll: Not enough msg.value\\\");\\n        // Celo does not use V3\\n        address weth = IUniswapV3(swapRouter).WETH9();\\n\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            require(_swaps[i].path.toAddress(_swaps[i].path.length - 20) == weth, \\\"Payroll: Swap not native token\\\");\\n            uint256 amountIn = IUniswapV3(swapRouter).exactOutput{value: _swaps[i].amountInMax}(\\n                IUniswapV3.ExactOutputParams({\\n                    path: _swaps[i].path,\\n                    recipient: msg.sender,\\n                    deadline: _deadline,\\n                    amountOut: _swaps[i].amountOut,\\n                    amountInMaximum: _swaps[i].amountInMax\\n                })\\n            );\\n            emit SwapFinished(address(0), _swaps[i].path.toAddress(0), amountIn);\\n        }\\n\\n        // Explicitly request ETH refound\\n        IUniswapV3(swapRouter).refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 and the transfer to the given addresses.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Swap ERC20 to ERC20.\\n     * @notice Available to send ETH or ERC20.\\n     */\\n    function performSwapV2AndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external payable nonReentrant {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV2(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n        refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 and the transfer to the given addresses.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Swap ETH to ERC20.\\n     * @notice Available to send ETH or ERC20.\\n     */\\n    function performSwapV2AndPaymentETH(\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external payable nonReentrant {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        if (_swaps.length > 0) {\\n            _performSwapV2ETH(_totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n        refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @notice Swap ERC20 to ERC20.\\n     */\\n    function performSwapV2(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) external nonReentrant {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        _performSwapV2(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        refundETH();\\n    }\\n\\n    /**\\n     * Perform the swap with Uniswap V2 to the given token addresses and amounts.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @notice Swap ETH to ERC20.\\n     */\\n    function performSwapV2ETH(\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) external payable nonReentrant {\\n        require(isSwapV2, \\\"Payroll: Not uniswapV2\\\");\\n        require(_swaps.length > 0, \\\"Payroll: Empty swaps\\\");\\n        _performSwapV2ETH(_totalAmountToSwap, _deadline, _swaps);\\n        refundETH();\\n    }\\n\\n    function _swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal virtual returns (uint256 amounts) {\\n        return IUniswapV2(swapRouter).swapTokensForExactETH(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            to,\\n            deadline\\n        )[0];\\n    }\\n\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal virtual returns (uint256 amounts) {\\n        return IUniswapV2(swapRouter).swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            to,\\n            deadline\\n        )[0];\\n    }\\n\\n    function _performSwapV2(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) internal {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n        uint256 amountIn = 0;\\n        address weth = address(0);\\n        // Celo Native currency is an ERC20\\n        if (block.chainid != 42220 && block.chainid != 44787) {\\n            weth = _weth();\\n        }\\n\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            require(_swaps[i].path[0] == _erc20TokenOrigin, \\\"Payroll: Swap not token origin\\\");\\n            if (_swaps[i].path[_swaps[i].path.length - 1] == weth) {\\n                // if tokenTo is WETH, the contract needs to receive it to use it in payments (if needed)\\n                // then it will be refunded to msg.sender\\n                amountIn = _swapTokensForExactETH(\\n                    _swaps[i].amountOut,\\n                    _swaps[i].amountInMax,\\n                    _swaps[i].path,\\n                    address(this),\\n                    _deadline\\n                );\\n            } else {\\n                // if tokenTo is any ERC20 the recipient is the msg.sender\\n                amountIn = _swapTokensForExactTokens(\\n                    _swaps[i].amountOut,\\n                    _swaps[i].amountInMax,\\n                    _swaps[i].path,\\n                    msg.sender,\\n                    _deadline\\n                );\\n            }\\n            emit SwapFinished(_erc20TokenOrigin, _swaps[i].path[_swaps[i].path.length - 1], amountIn);\\n        }\\n\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n    }\\n\\n    function _swapETHForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal virtual returns (uint256 amounts) {\\n        return IUniswapV2(swapRouter).swapETHForExactTokens{value: amountInMax}(\\n            amountOut,\\n            path,\\n            to,\\n            deadline\\n        )[0];\\n    }\\n\\n    function _weth() internal virtual view returns (address) {\\n        return IUniswapV2(swapRouter).WETH();\\n    }\\n\\n    function _performSwapV2ETH(\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        SwapV2[] calldata _swaps\\n    ) internal {\\n        require(msg.value >= _totalAmountToSwap, \\\"Payroll: Not enough msg.value\\\");\\n        // We should not use this method in Celo, instead use _performSwapV2\\n        address weth = _weth();\\n\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(_swaps[i].path.length > 0, \\\"Payroll: Empty path\\\");\\n            require(_swaps[i].path[0] == weth, \\\"Payroll: Swap not native token\\\");\\n            // return the amount spend of tokenIn\\n            uint256 amountIn = _swapETHForExactTokens(\\n                _swaps[i].amountOut,\\n                _swaps[i].amountInMax,\\n                _swaps[i].path,\\n                msg.sender,\\n                _deadline\\n            );\\n            address[] calldata path = _swaps[i].path;\\n            emit SwapFinished(address(0), path[path.length - 1], amountIn);\\n        }\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, public method.\\n     * @param _payments The array of the Payment data.\\n     * @notice Available to send ETH or ERC20.\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) external payable nonReentrant {\\n        _performMultiPayment(_payments);\\n        refundETH();\\n    }\\n\\n    function _performMultiPayment(Payment[] calldata _payments) internal {\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            require(_payments[i].amountsToTransfer.length > 0, \\\"Payroll: No amounts to transfer\\\");\\n            require(\\n                _payments[i].amountsToTransfer.length == _payments[i].receivers.length,\\n                \\\"Payroll: Arrays must have same length\\\"\\n            );\\n\\n            if (_payments[i].token != address(0)) {\\n                _performERC20Payment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n            } else {\\n                _performETHPayment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Performs the ERC20 payment to the given addresses.\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer.\\n     * @param _receivers The array of payment receivers.\\n     * @param _amountsToTransfer The array of payments' amounts to perform.\\n     * The amount will be transfered to the address on _receivers with the same index.\\n     */\\n    function _performERC20Payment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        uint256 acumulatedFee = 0;\\n        uint256 totalAmountSent = 0;\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Payroll: Cannot send to a 0 address\\\");\\n            totalAmountSent = totalAmountSent + _amountsToTransfer[i];\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, _receivers[i], _amountsToTransfer[i]);\\n        }\\n        emit BatchPayment(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n\\n        acumulatedFee = (totalAmountSent * fee) / MANTISSA;\\n        if (acumulatedFee > 0) {\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, feeAddress, acumulatedFee);\\n        }\\n        emit FeeCharged(_erc20TokenAddress, feeAddress, acumulatedFee);\\n    }\\n\\n    /**\\n     * Performs the ETH payment to the given addresses.\\n     * @param _receivers The array of payment receivers.\\n     * @param _amountsToTransfer The array of payments' amounts to perform.\\n     * The amount will be transfered to the address on _receivers with the same index.\\n     */\\n    function _performETHPayment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        uint256 acumulatedFee = 0;\\n        uint256 totalAmountSent = 0;\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Payroll: Cannot send to a 0 address\\\");\\n            totalAmountSent = totalAmountSent + _amountsToTransfer[i];\\n\\n            (bool success, ) = payable(_receivers[i]).call{value: _amountsToTransfer[i]}(\\\"\\\");\\n            require(success, \\\"Payroll: ETH transfer failed\\\");\\n        }\\n        emit BatchPayment(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n\\n        acumulatedFee = (totalAmountSent * fee) / MANTISSA;\\n        if (acumulatedFee > 0) {\\n            totalAmountSent = totalAmountSent + acumulatedFee;\\n            (bool success, ) = payable(feeAddress).call{value: acumulatedFee}(\\\"\\\");\\n            require(success, \\\"Payroll: ETH fee transfer failed\\\");\\n        }\\n        emit FeeCharged(_erc20TokenAddress, feeAddress, acumulatedFee);\\n    }\\n\\n    /**\\n     * Perform the refound of the leftover ETH.\\n     */\\n    function refundETH() internal {\\n        uint256 leftOver = address(this).balance;\\n        if (leftOver > 1) {\\n            (bool success, ) = payable(msg.sender).call{value: leftOver}(\\\"\\\");\\n            require(success, \\\"Payroll: ETH leftOver transfer failed\\\");\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xf283616662f35a281fca825a1f80207bce241c41a43260de7502c651c12e35a3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/PayrollIotex.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IMimoV2.sol\\\";\\nimport \\\"./Payroll.sol\\\";\\n\\n/**\\n * @title Think and Dev Paymentbox\\n * @author Think and Dev Team\\n * @notice Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction.\\n * Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\\n */\\ncontract PayrollIotex is Payroll {\\n    using BytesLib for bytes;\\n\\n    function _swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal override returns (uint256 amounts) {\\n        return IMimoV2(swapRouter).swapTokensForExactETH(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            to,\\n            deadline,\\n            address(0)\\n        )[0];\\n    }\\n\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal override returns (uint256 amounts) {\\n        return IMimoV2(swapRouter).swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            to,\\n            deadline,\\n            address(0)\\n        )[0];\\n    }\\n\\n    function _swapETHForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal override returns (uint256 amounts) {\\n        return IMimoV2(swapRouter).swapETHForExactTokens{value: amountInMax}(\\n            amountOut,\\n            path,\\n            to,\\n            deadline,\\n            address(0)\\n        )[0];\\n    }\\n\\n    function _weth() internal view override returns (address) {\\n        return IMimoV2(swapRouter).WETH();\\n    }\\n}\\n\",\"keccak256\":\"0x590de64a1d7cb6af4b7cfd039952f75ef612cbc7e84b2aa830a67125be094bf2\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IMimoV2.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IMimoV2\\n * @dev Simpler version of MimoV2\\n */\\ninterface IMimoV2 {\\n    //Uniswap V2\\n    function WETH() external pure returns (address);\\n\\n    function factory() external pure returns (address);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline,\\n        address referrer\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline,\\n        address referrer\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline,\\n        address referrer\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        address referrer\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\",\"keccak256\":\"0xdb808758e37e1b0954afb806b55f3f94feeb48a95619eecfcc4ff16238da2c9b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title UniswapV2\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapV2 {\\n    //Uniswap V2\\n    function WETH() external pure returns (address);\\n\\n    function factory() external pure returns (address);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    // https://docs.uniswap.org/protocol/V2/reference/smart-contracts/router-02#addliquidity\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\\n/**\\n * @title UniswapV2\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapV3 {\\n    //UniswapV3\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function WETH9() external pure returns (address);\\n\\n    function refundETH() external payable;\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x8f017dee784994bea4e428da9c30ff6c44e031d3dfe0306ed9b46c0a1d59cfa4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IWETH\\n * @dev Simpler version of IWETH interface\\n */\\ninterface IWETH {\\n    function withdraw(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xafa7779041c44ce6d089db1b747f71ad9f6fafacde303bcbf96890e68232bf1c\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137b1806100206000396000f3fe60806040526004361061014f5760003560e01c80638da5cb5b116100b6578063db9d03341161006f578063db9d03341461036c578063ddca3f431461037f578063ef6aa26414610395578063f1b01903146103b5578063f2fde38b146103c8578063f65a83cf146103e857600080fd5b80638da5cb5b146102c857806392721482146102e6578063ac43070b146102f9578063bbc5ffb714610319578063c31c9c071461032c578063d8ca72361461034c57600080fd5b80634127535811610108578063412753581461020557806354fd4d501461023d57806369fe0e2d14610253578063715018a6146102735780638705fcd414610288578063887a622a146102a857600080fd5b80630e7ab0c31461015b5780632171dcc9146101705780632703984c1461019057806332b20df8146101bf578063395ae6a3146101d2578063408def1e146101e557600080fd5b3661015657005b600080fd5b61016e610169366004612e1b565b610412565b005b34801561017c57600080fd5b5061016e61018b366004612e98565b6104a1565b34801561019c57600080fd5b506101ac670de0b6b3a764000081565b6040519081526020015b60405180910390f35b61016e6101cd366004612ed1565b6104b7565b61016e6101e0366004612f5b565b610533565b3480156101f157600080fd5b5061016e610200366004612ff8565b6105b1565b34801561021157600080fd5b50609854610225906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b34801561024957600080fd5b506101ac609a5481565b34801561025f57600080fd5b5061016e61026e366004612ff8565b6105c5565b34801561027f57600080fd5b5061016e6105d6565b34801561029457600080fd5b5061016e6102a3366004613011565b6105ea565b3480156102b457600080fd5b5061016e6102c3366004613035565b6105fb565b3480156102d457600080fd5b506033546001600160a01b0316610225565b61016e6102f4366004612f5b565b610683565b34801561030557600080fd5b5061016e6103143660046130a6565b6106e0565b61016e610327366004612ed1565b61076d565b34801561033857600080fd5b50609754610225906001600160a01b031681565b34801561035857600080fd5b5061016e610367366004613035565b6107c9565b61016e61037a3660046130a6565b61083e565b34801561038b57600080fd5b506101ac60995481565b3480156103a157600080fd5b5061016e6103b03660046130e8565b610881565b61016e6103c3366004612e1b565b6109c4565b3480156103d457600080fd5b5061016e6103e3366004613011565b610a38565b3480156103f457600080fd5b50609b546104029060ff1681565b60405190151581526020016101b6565b6002606554141561043e5760405162461bcd60e51b815260040161043590613139565b60405180910390fd5b6002606555609b5460ff166104655760405162461bcd60e51b815260040161043590613170565b806104825760405162461bcd60e51b8152600401610435906131a0565b61048e84848484610aae565b610496610d65565b505060016065555050565b6104a9610e15565b6104b38282610e6f565b5050565b600260655414156104da5760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff16156105025760405162461bcd60e51b8152600401610435906131ce565b82156105145761051486868686610f48565b61051e82826113d3565b610526610d65565b5050600160655550505050565b600260655414156105565760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff161561057e5760405162461bcd60e51b8152600401610435906131ce565b82156105915761059187878787876116be565b61059b82826113d3565b6105a3610d65565b505060016065555050505050565b6105b9610e15565b6105c281611cb6565b50565b6105cd610e15565b6105c281611d42565b6105de610e15565b6105e86000611dd9565b565b6105f2610e15565b6105c281611e2b565b6002606554141561061e5760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff166106455760405162461bcd60e51b815260040161043590613170565b806106625760405162461bcd60e51b8152600401610435906131a0565b61066f8585858585611ecf565b610677610d65565b50506001606555505050565b600260655414156106a65760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff166106cd5760405162461bcd60e51b815260040161043590613170565b8215610591576105918787878787611ecf565b600260655414156107035760405162461bcd60e51b815260040161043590613139565b600260655560005b8181101561076357610751838383818110610728576107286131fe565b905060200201602081019061073d9190613011565b6097546001600160a01b03166000196122bd565b8061075b8161322a565b91505061070b565b5050600160655550565b600260655414156107905760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff166107b75760405162461bcd60e51b815260040161043590613170565b82156105145761051486868686610aae565b600260655414156107ec5760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff16156108145760405162461bcd60e51b8152600401610435906131ce565b806108315760405162461bcd60e51b8152600401610435906131a0565b61066f85858585856116be565b600260655414156108615760405162461bcd60e51b815260040161043590613139565b600260655561087082826113d3565b610878610d65565b50506001606555565b600054610100900460ff16158080156108a15750600054600160ff909116105b806108bb5750303b1580156108bb575060005460ff166001145b61091e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610435565b6000805460ff191660011790558015610941576000805461ff0019166101001790555b6109496123b6565b6109516123e5565b61095b8585610e6f565b61096483611e2b565b61096d82611d42565b6109776001611cb6565b80156109bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600260655414156109e75760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff1615610a0f5760405162461bcd60e51b8152600401610435906131ce565b80610a2c5760405162461bcd60e51b8152600401610435906131a0565b61048e84848484610f48565b610a40610e15565b6001600160a01b038116610aa55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610435565b6105c281611dd9565b83341015610afe5760405162461bcd60e51b815260206004820152601d60248201527f506179726f6c6c3a204e6f7420656e6f756768206d73672e76616c75650000006044820152606401610435565b6000610b08612414565b905060005b82811015610d5d576000848483818110610b2957610b296131fe565b9050602002810190610b3b9190613245565b610b49906040810190613265565b905011610b685760405162461bcd60e51b8152600401610435906132af565b816001600160a01b0316848483818110610b8457610b846131fe565b9050602002810190610b969190613245565b610ba4906040810190613265565b6000818110610bb557610bb56131fe565b9050602002016020810190610bca9190613011565b6001600160a01b031614610c205760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f74206e617469766520746f6b656e00006044820152606401610435565b6000610cb1858584818110610c3757610c376131fe565b9050602002810190610c499190613245565b35868685818110610c5c57610c5c6131fe565b9050602002810190610c6e9190613245565b60200135878786818110610c8457610c846131fe565b9050602002810190610c969190613245565b610ca4906040810190613265565b338b63ffffffff16612496565b9050366000868685818110610cc857610cc86131fe565b9050602002810190610cda9190613245565b610ce8906040810190613265565b909250905060008051602061375c83398151915260008383610d0b6001826132dc565b818110610d1a57610d1a6131fe565b9050602002016020810190610d2f9190613011565b85604051610d3f939291906132f3565b60405180910390a15050508080610d559061322a565b915050610b0d565b505050505050565b4760018111156105c257604051600090339083908381818185875af1925050503d8060008114610db1576040519150601f19603f3d011682016040523d82523d6000602084013e610db6565b606091505b50509050806104b35760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20455448206c6566744f766572207472616e736665722066604482015264185a5b195960da1b6064820152608401610435565b6033546001600160a01b031633146105e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610435565b6001600160a01b038216610edb5760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b6064820152608401610435565b609b805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b83341015610f985760405162461bcd60e51b815260206004820152601d60248201527f506179726f6c6c3a204e6f7420656e6f756768206d73672e76616c75650000006044820152606401610435565b609754604080516312a9293f60e21b815290516000926001600160a01b031691634aa4a4fc916004808301926020929190829003018186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110159190613317565b905060005b82811015611363576000848483818110611036576110366131fe565b90506020028101906110489190613245565b611056906040810190613334565b9050116110755760405162461bcd60e51b8152600401610435906132af565b816001600160a01b03166111306014868685818110611096576110966131fe565b90506020028101906110a89190613245565b6110b6906040810190613334565b6110c19291506132dc565b8686858181106110d3576110d36131fe565b90506020028101906110e59190613245565b6110f3906040810190613334565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061254f9050565b6001600160a01b0316146111865760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f74206e617469766520746f6b656e00006044820152606401610435565b6097546000906001600160a01b031663f28c04988686858181106111ac576111ac6131fe565b90506020028101906111be9190613245565b602001356040518060a001604052808989888181106111df576111df6131fe565b90506020028101906111f19190613245565b6111ff906040810190613334565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b16604082015260600189898881811061125d5761125d6131fe565b905060200281019061126f9190613245565b358152602001898988818110611287576112876131fe565b90506020028101906112999190613245565b602001358152506040518363ffffffff1660e01b81526004016112bc91906133ab565b6020604051808303818588803b1580156112d557600080fd5b505af11580156112e9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061130e919061341a565b905060008051602061375c833981519152600061133860008888878181106110d3576110d36131fe565b83604051611348939291906132f3565b60405180910390a1508061135b8161322a565b91505061101a565b50609760009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113b457600080fd5b505af11580156113c8573d6000803e3d6000fd5b505050505050505050565b60005b818110156116b95760008383838181106113f2576113f26131fe565b90506020028101906114049190613245565b611412906040810190613265565b9050116114615760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e73666572006044820152606401610435565b828282818110611473576114736131fe565b90506020028101906114859190613245565b611493906020810190613265565b90508383838181106114a7576114a76131fe565b90506020028101906114b99190613245565b6114c7906040810190613265565b9050146115245760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b6064820152608401610435565b6000838383818110611538576115386131fe565b905060200281019061154a9190613245565b611558906020810190613011565b6001600160a01b0316146116095761160483838381811061157b5761157b6131fe565b905060200281019061158d9190613245565b61159b906020810190613011565b8484848181106115ad576115ad6131fe565b90506020028101906115bf9190613245565b6115cd906020810190613265565b8686868181106115df576115df6131fe565b90506020028101906115f19190613245565b6115ff906040810190613265565b612603565b6116a7565b6116a783838381811061161e5761161e6131fe565b90506020028101906116309190613245565b61163e906020810190613011565b848484818110611650576116506131fe565b90506020028101906116629190613245565b611670906020810190613265565b868686818110611682576116826131fe565b90506020028101906116949190613245565b6116a2906040810190613265565b6127b6565b806116b18161322a565b9150506113d6565b505050565b6116ca85333087612a89565b609754604080516312a9293f60e21b815290516000926001600160a01b031691634aa4a4fc916004808301926020929190829003018186803b15801561170f57600080fd5b505afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117479190613317565b90506000805b83811015611c1e576000858583818110611769576117696131fe565b905060200281019061177b9190613245565b611789906040810190613334565b9050116117a85760405162461bcd60e51b8152600401610435906132af565b876001600160a01b031661180660148787858181106117c9576117c96131fe565b90506020028101906117db9190613245565b6117e9906040810190613334565b6117f49291506132dc565b8787858181106110d3576110d36131fe565b6001600160a01b03161461185c5760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e00006044820152606401610435565b600061187560008787858181106110d3576110d36131fe565b9050836001600160a01b0316816001600160a01b03161415611a7d576097546040805160a081019091526001600160a01b039091169063f28c049890808989878181106118c4576118c46131fe565b90506020028101906118d69190613245565b6118e4906040810190613334565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525030602082015263ffffffff8b166040820152606001898987818110611942576119426131fe565b90506020028101906119549190613245565b35815260200189898781811061196c5761196c6131fe565b905060200281019061197e9190613245565b602001358152506040518263ffffffff1660e01b81526004016119a191906133ab565b602060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f3919061341a565b9250836001600160a01b0316632e1a7d4d878785818110611a1657611a166131fe565b9050602002810190611a289190613245565b60405160e083901b6001600160e01b031916815290356004820152602401600060405180830381600087803b158015611a6057600080fd5b505af1158015611a74573d6000803e3d6000fd5b50505050611be2565b6097546040805160a081019091526001600160a01b039091169063f28c04989080898987818110611ab057611ab06131fe565b9050602002810190611ac29190613245565b611ad0906040810190613334565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b166040820152606001898987818110611b2e57611b2e6131fe565b9050602002810190611b409190613245565b358152602001898987818110611b5857611b586131fe565b9050602002810190611b6a9190613245565b602001358152506040518263ffffffff1660e01b8152600401611b8d91906133ab565b602060405180830381600087803b158015611ba757600080fd5b505af1158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf919061341a565b92505b60008051602061375c833981519152898285604051611c03939291906132f3565b60405180910390a15080611c168161322a565b91505061174d565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c99919061341a565b90508015611cac57611cac883383612b8f565b5050505050505050565b60008111611d065760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a2056657273696f6e2063616e2774206265203000000000006044820152606401610435565b609a8190556040518181527fd559f56ba9b2c69da3765a6d0208c7f7f352ade55a3be7fb9589ba50aa4ce5f3906020015b60405180910390a150565b666a94d74f4300008110611da45760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b6064820152608401610435565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390602001611d37565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116611e815760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e27742062652030006044820152606401610435565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c990602001611d37565b611edb85333087612a89565b6000804661a4ec14158015611ef257504661aef314155b15611f0257611eff612414565b90505b60005b83811015611c1e576000858583818110611f2157611f216131fe565b9050602002810190611f339190613245565b611f41906040810190613265565b905011611f605760405162461bcd60e51b8152600401610435906132af565b876001600160a01b0316858583818110611f7c57611f7c6131fe565b9050602002810190611f8e9190613245565b611f9c906040810190613265565b6000818110611fad57611fad6131fe565b9050602002016020810190611fc29190613011565b6001600160a01b0316146120185760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e00006044820152606401610435565b816001600160a01b0316858583818110612034576120346131fe565b90506020028101906120469190613245565b612054906040810190613265565b6001888886818110612068576120686131fe565b905060200281019061207a9190613245565b612088906040810190613265565b6120939291506132dc565b8181106120a2576120a26131fe565b90506020020160208101906120b79190613011565b6001600160a01b0316141561215c576121558585838181106120db576120db6131fe565b90506020028101906120ed9190613245565b35868684818110612100576121006131fe565b90506020028101906121129190613245565b60200135878785818110612128576121286131fe565b905060200281019061213a9190613245565b612148906040810190613265565b308b63ffffffff16612c88565b92506121ee565b6121eb858583818110612171576121716131fe565b90506020028101906121839190613245565b35868684818110612196576121966131fe565b90506020028101906121a89190613245565b602001358787858181106121be576121be6131fe565b90506020028101906121d09190613245565b6121de906040810190613265565b338b63ffffffff16612d1b565b92505b60008051602061375c83398151915288868684818110612210576122106131fe565b90506020028101906122229190613245565b612230906040810190613265565b6001898987818110612244576122446131fe565b90506020028101906122569190613245565b612264906040810190613265565b61226f9291506132dc565b81811061227e5761227e6131fe565b90506020020160208101906122939190613011565b856040516122a3939291906132f3565b60405180910390a1806122b58161322a565b915050611f05565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916123199190613433565b6000604051808303816000865af19150503d8060008114612356576040519150601f19603f3d011682016040523d82523d6000602084013e61235b565b606091505b50915091508180156123855750805115806123855750808060200190518101906123859190613445565b6109bd5760405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606401610435565b600054610100900460ff166123dd5760405162461bcd60e51b815260040161043590613462565b6105e8612d58565b600054610100900460ff1661240c5760405162461bcd60e51b815260040161043590613462565b6105e8612d86565b609754604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c4648916004808301926020929190829003018186803b15801561245957600080fd5b505afa15801561246d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124919190613317565b905090565b609754604051631788072560e11b81526000916001600160a01b031690632f100e4a9088906124d3908b908a908a908a908a908a906004016134f6565b6000604051808303818588803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526125299190810190613551565b60008151811061253b5761253b6131fe565b602002602001015190509695505050505050565b60008161255d81601461360f565b10156125a05760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b6044820152606401610435565b6125ab82601461360f565b835110156125f35760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610435565b500160200151600160601b900490565b60008060005b858110156126e3576000878783818110612625576126256131fe565b905060200201602081019061263a9190613011565b6001600160a01b031614156126615760405162461bcd60e51b815260040161043590613627565b848482818110612673576126736131fe565b9050602002013582612685919061360f565b91506126d1883389898581811061269e5761269e6131fe565b90506020020160208101906126b39190613011565b8888868181106126c5576126c56131fe565b90506020020135612a89565b806126db8161322a565b915050612609565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d9878787878760405161271b95949392919061366a565b60405180910390a1670de0b6b3a76400006099548261273a91906136ce565b61274491906136ed565b915081156127665760985461276690889033906001600160a01b031685612a89565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d916127a5918a916001600160a01b03169086906132f3565b60405180910390a150505050505050565b60008060005b8581101561292e5760008787838181106127d8576127d86131fe565b90506020020160208101906127ed9190613011565b6001600160a01b031614156128145760405162461bcd60e51b815260040161043590613627565b848482818110612826576128266131fe565b9050602002013582612838919061360f565b9150600087878381811061284e5761284e6131fe565b90506020020160208101906128639190613011565b6001600160a01b031686868481811061287e5761287e6131fe565b9050602002013560405160006040518083038185875af1925050503d80600081146128c5576040519150601f19603f3d011682016040523d82523d6000602084013e6128ca565b606091505b505090508061291b5760405162461bcd60e51b815260206004820152601c60248201527f506179726f6c6c3a20455448207472616e73666572206661696c6564000000006044820152606401610435565b50806129268161322a565b9150506127bc565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d9878787878760405161296695949392919061366a565b60405180910390a1670de0b6b3a76400006099548261298591906136ce565b61298f91906136ed565b91508115612766576129a1828261360f565b6098546040519192506000916001600160a01b039091169084908381818185875af1925050503d80600081146129f3576040519150601f19603f3d011682016040523d82523d6000602084013e6129f8565b606091505b5050905080612a495760405162461bcd60e51b815260206004820181905260248201527f506179726f6c6c3a2045544820666565207472616e73666572206661696c65646044820152606401610435565b506098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d916127a5918a916001600160a01b03169086906132f3565b600080856001600160a01b03166323b872dd60e01b868686604051602401612ab3939291906132f3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612af19190613433565b6000604051808303816000865af19150503d8060008114612b2e576040519150601f19603f3d011682016040523d82523d6000602084013e612b33565b606091505b5091509150818015612b5d575080511580612b5d575080806020019051810190612b5d9190613445565b610d5d5760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606401610435565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612beb9190613433565b6000604051808303816000865af19150503d8060008114612c28576040519150601f19603f3d011682016040523d82523d6000602084013e612c2d565b606091505b5091509150818015612c57575080511580612c57575080806020019051810190612c579190613445565b6109bd5760405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606401610435565b60975460405163962efddb60e01b81526000916001600160a01b03169063962efddb90612cc5908a908a908a908a908a908a908a9060040161370f565b600060405180830381600087803b158015612cdf57600080fd5b505af1158015612cf3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125299190810190613551565b609754604051635190b37760e11b81526000916001600160a01b03169063a32166ee90612cc5908a908a908a908a908a908a908a9060040161370f565b600054610100900460ff16612d7f5760405162461bcd60e51b815260040161043590613462565b6001606555565b600054610100900460ff16612dad5760405162461bcd60e51b815260040161043590613462565b6105e833611dd9565b803563ffffffff81168114612dca57600080fd5b919050565b60008083601f840112612de157600080fd5b50813567ffffffffffffffff811115612df957600080fd5b6020830191508360208260051b8501011115612e1457600080fd5b9250929050565b60008060008060608587031215612e3157600080fd5b84359350612e4160208601612db6565b9250604085013567ffffffffffffffff811115612e5d57600080fd5b612e6987828801612dcf565b95989497509550505050565b6001600160a01b03811681146105c257600080fd5b80151581146105c257600080fd5b60008060408385031215612eab57600080fd5b8235612eb681612e75565b91506020830135612ec681612e8a565b809150509250929050565b60008060008060008060808789031215612eea57600080fd5b86359550612efa60208801612db6565b9450604087013567ffffffffffffffff80821115612f1757600080fd5b612f238a838b01612dcf565b90965094506060890135915080821115612f3c57600080fd5b50612f4989828a01612dcf565b979a9699509497509295939492505050565b600080600080600080600060a0888a031215612f7657600080fd5b8735612f8181612e75565b965060208801359550612f9660408901612db6565b9450606088013567ffffffffffffffff80821115612fb357600080fd5b612fbf8b838c01612dcf565b909650945060808a0135915080821115612fd857600080fd5b50612fe58a828b01612dcf565b989b979a50959850939692959293505050565b60006020828403121561300a57600080fd5b5035919050565b60006020828403121561302357600080fd5b813561302e81612e75565b9392505050565b60008060008060006080868803121561304d57600080fd5b853561305881612e75565b94506020860135935061306d60408701612db6565b9250606086013567ffffffffffffffff81111561308957600080fd5b61309588828901612dcf565b969995985093965092949392505050565b600080602083850312156130b957600080fd5b823567ffffffffffffffff8111156130d057600080fd5b6130dc85828601612dcf565b90969095509350505050565b600080600080608085870312156130fe57600080fd5b843561310981612e75565b9350602085013561311981612e8a565b9250604085013561312981612e75565b9396929550929360600135925050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601690820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b604082015260600190565b602080825260149082015273506179726f6c6c3a20456d70747920737761707360601b604082015260600190565b602080825260169082015275506179726f6c6c3a204e6f7420756e6973776170563360501b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561323e5761323e613214565b5060010190565b60008235605e1983360301811261325b57600080fd5b9190910192915050565b6000808335601e1984360301811261327c57600080fd5b83018035915067ffffffffffffffff82111561329757600080fd5b6020019150600581901b3603821315612e1457600080fd5b6020808252601390820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b604082015260600190565b6000828210156132ee576132ee613214565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561332957600080fd5b815161302e81612e75565b6000808335601e1984360301811261334b57600080fd5b83018035915067ffffffffffffffff82111561336657600080fd5b602001915036819003821315612e1457600080fd5b60005b8381101561339657818101518382015260200161337e565b838111156133a5576000848401525b50505050565b602081526000825160a0602084015280518060c08501526133d38160e086016020850161337b565b60018060a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60006020828403121561342c57600080fd5b5051919050565b6000825161325b81846020870161337b565b60006020828403121561345757600080fd5b815161302e81612e8a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8183526000602080850194508260005b858110156134eb5781356134d081612e75565b6001600160a01b0316875295820195908201906001016134bd565b509495945050505050565b86815260a06020820152600061351060a0830187896134ad565b6001600160a01b03958616604084015260608301949094525092166080909201919091529392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561356457600080fd5b825167ffffffffffffffff8082111561357c57600080fd5b818501915085601f83011261359057600080fd5b8151818111156135a2576135a261353b565b8060051b604051601f19603f830116810181811085821117156135c7576135c761353b565b6040529182528482019250838101850191888311156135e557600080fd5b938501935b82851015613603578451845293850193928501926135ea565b98975050505050505050565b6000821982111561362257613622613214565b500190565b60208082526023908201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260408201526265737360e81b606082015260800190565b6001600160a01b038616815260606020820181905260009061368f90830186886134ad565b82810360408401528381526001600160fb1b038411156136ae57600080fd5b8360051b8086602084013760009101602001908152979650505050505050565b60008160001904831182151516156136e8576136e8613214565b500290565b60008261370a57634e487b7160e01b600052601260045260246000fd5b500490565b87815286602082015260c06040820152600061372f60c0830187896134ad565b6001600160a01b039586166060840152608083019490945250921660a09092019190915294935050505056fe2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56a264697066735822122074045fed0bf3a7b1293cb45a47c9630edf92849f3d94f03e87200bc233b1eacb64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80638da5cb5b116100b6578063db9d03341161006f578063db9d03341461036c578063ddca3f431461037f578063ef6aa26414610395578063f1b01903146103b5578063f2fde38b146103c8578063f65a83cf146103e857600080fd5b80638da5cb5b146102c857806392721482146102e6578063ac43070b146102f9578063bbc5ffb714610319578063c31c9c071461032c578063d8ca72361461034c57600080fd5b80634127535811610108578063412753581461020557806354fd4d501461023d57806369fe0e2d14610253578063715018a6146102735780638705fcd414610288578063887a622a146102a857600080fd5b80630e7ab0c31461015b5780632171dcc9146101705780632703984c1461019057806332b20df8146101bf578063395ae6a3146101d2578063408def1e146101e557600080fd5b3661015657005b600080fd5b61016e610169366004612e1b565b610412565b005b34801561017c57600080fd5b5061016e61018b366004612e98565b6104a1565b34801561019c57600080fd5b506101ac670de0b6b3a764000081565b6040519081526020015b60405180910390f35b61016e6101cd366004612ed1565b6104b7565b61016e6101e0366004612f5b565b610533565b3480156101f157600080fd5b5061016e610200366004612ff8565b6105b1565b34801561021157600080fd5b50609854610225906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b34801561024957600080fd5b506101ac609a5481565b34801561025f57600080fd5b5061016e61026e366004612ff8565b6105c5565b34801561027f57600080fd5b5061016e6105d6565b34801561029457600080fd5b5061016e6102a3366004613011565b6105ea565b3480156102b457600080fd5b5061016e6102c3366004613035565b6105fb565b3480156102d457600080fd5b506033546001600160a01b0316610225565b61016e6102f4366004612f5b565b610683565b34801561030557600080fd5b5061016e6103143660046130a6565b6106e0565b61016e610327366004612ed1565b61076d565b34801561033857600080fd5b50609754610225906001600160a01b031681565b34801561035857600080fd5b5061016e610367366004613035565b6107c9565b61016e61037a3660046130a6565b61083e565b34801561038b57600080fd5b506101ac60995481565b3480156103a157600080fd5b5061016e6103b03660046130e8565b610881565b61016e6103c3366004612e1b565b6109c4565b3480156103d457600080fd5b5061016e6103e3366004613011565b610a38565b3480156103f457600080fd5b50609b546104029060ff1681565b60405190151581526020016101b6565b6002606554141561043e5760405162461bcd60e51b815260040161043590613139565b60405180910390fd5b6002606555609b5460ff166104655760405162461bcd60e51b815260040161043590613170565b806104825760405162461bcd60e51b8152600401610435906131a0565b61048e84848484610aae565b610496610d65565b505060016065555050565b6104a9610e15565b6104b38282610e6f565b5050565b600260655414156104da5760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff16156105025760405162461bcd60e51b8152600401610435906131ce565b82156105145761051486868686610f48565b61051e82826113d3565b610526610d65565b5050600160655550505050565b600260655414156105565760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff161561057e5760405162461bcd60e51b8152600401610435906131ce565b82156105915761059187878787876116be565b61059b82826113d3565b6105a3610d65565b505060016065555050505050565b6105b9610e15565b6105c281611cb6565b50565b6105cd610e15565b6105c281611d42565b6105de610e15565b6105e86000611dd9565b565b6105f2610e15565b6105c281611e2b565b6002606554141561061e5760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff166106455760405162461bcd60e51b815260040161043590613170565b806106625760405162461bcd60e51b8152600401610435906131a0565b61066f8585858585611ecf565b610677610d65565b50506001606555505050565b600260655414156106a65760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff166106cd5760405162461bcd60e51b815260040161043590613170565b8215610591576105918787878787611ecf565b600260655414156107035760405162461bcd60e51b815260040161043590613139565b600260655560005b8181101561076357610751838383818110610728576107286131fe565b905060200201602081019061073d9190613011565b6097546001600160a01b03166000196122bd565b8061075b8161322a565b91505061070b565b5050600160655550565b600260655414156107905760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff166107b75760405162461bcd60e51b815260040161043590613170565b82156105145761051486868686610aae565b600260655414156107ec5760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff16156108145760405162461bcd60e51b8152600401610435906131ce565b806108315760405162461bcd60e51b8152600401610435906131a0565b61066f85858585856116be565b600260655414156108615760405162461bcd60e51b815260040161043590613139565b600260655561087082826113d3565b610878610d65565b50506001606555565b600054610100900460ff16158080156108a15750600054600160ff909116105b806108bb5750303b1580156108bb575060005460ff166001145b61091e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610435565b6000805460ff191660011790558015610941576000805461ff0019166101001790555b6109496123b6565b6109516123e5565b61095b8585610e6f565b61096483611e2b565b61096d82611d42565b6109776001611cb6565b80156109bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600260655414156109e75760405162461bcd60e51b815260040161043590613139565b6002606555609b5460ff1615610a0f5760405162461bcd60e51b8152600401610435906131ce565b80610a2c5760405162461bcd60e51b8152600401610435906131a0565b61048e84848484610f48565b610a40610e15565b6001600160a01b038116610aa55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610435565b6105c281611dd9565b83341015610afe5760405162461bcd60e51b815260206004820152601d60248201527f506179726f6c6c3a204e6f7420656e6f756768206d73672e76616c75650000006044820152606401610435565b6000610b08612414565b905060005b82811015610d5d576000848483818110610b2957610b296131fe565b9050602002810190610b3b9190613245565b610b49906040810190613265565b905011610b685760405162461bcd60e51b8152600401610435906132af565b816001600160a01b0316848483818110610b8457610b846131fe565b9050602002810190610b969190613245565b610ba4906040810190613265565b6000818110610bb557610bb56131fe565b9050602002016020810190610bca9190613011565b6001600160a01b031614610c205760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f74206e617469766520746f6b656e00006044820152606401610435565b6000610cb1858584818110610c3757610c376131fe565b9050602002810190610c499190613245565b35868685818110610c5c57610c5c6131fe565b9050602002810190610c6e9190613245565b60200135878786818110610c8457610c846131fe565b9050602002810190610c969190613245565b610ca4906040810190613265565b338b63ffffffff16612496565b9050366000868685818110610cc857610cc86131fe565b9050602002810190610cda9190613245565b610ce8906040810190613265565b909250905060008051602061375c83398151915260008383610d0b6001826132dc565b818110610d1a57610d1a6131fe565b9050602002016020810190610d2f9190613011565b85604051610d3f939291906132f3565b60405180910390a15050508080610d559061322a565b915050610b0d565b505050505050565b4760018111156105c257604051600090339083908381818185875af1925050503d8060008114610db1576040519150601f19603f3d011682016040523d82523d6000602084013e610db6565b606091505b50509050806104b35760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20455448206c6566744f766572207472616e736665722066604482015264185a5b195960da1b6064820152608401610435565b6033546001600160a01b031633146105e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610435565b6001600160a01b038216610edb5760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b6064820152608401610435565b609b805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b83341015610f985760405162461bcd60e51b815260206004820152601d60248201527f506179726f6c6c3a204e6f7420656e6f756768206d73672e76616c75650000006044820152606401610435565b609754604080516312a9293f60e21b815290516000926001600160a01b031691634aa4a4fc916004808301926020929190829003018186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110159190613317565b905060005b82811015611363576000848483818110611036576110366131fe565b90506020028101906110489190613245565b611056906040810190613334565b9050116110755760405162461bcd60e51b8152600401610435906132af565b816001600160a01b03166111306014868685818110611096576110966131fe565b90506020028101906110a89190613245565b6110b6906040810190613334565b6110c19291506132dc565b8686858181106110d3576110d36131fe565b90506020028101906110e59190613245565b6110f3906040810190613334565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061254f9050565b6001600160a01b0316146111865760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f74206e617469766520746f6b656e00006044820152606401610435565b6097546000906001600160a01b031663f28c04988686858181106111ac576111ac6131fe565b90506020028101906111be9190613245565b602001356040518060a001604052808989888181106111df576111df6131fe565b90506020028101906111f19190613245565b6111ff906040810190613334565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b16604082015260600189898881811061125d5761125d6131fe565b905060200281019061126f9190613245565b358152602001898988818110611287576112876131fe565b90506020028101906112999190613245565b602001358152506040518363ffffffff1660e01b81526004016112bc91906133ab565b6020604051808303818588803b1580156112d557600080fd5b505af11580156112e9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061130e919061341a565b905060008051602061375c833981519152600061133860008888878181106110d3576110d36131fe565b83604051611348939291906132f3565b60405180910390a1508061135b8161322a565b91505061101a565b50609760009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113b457600080fd5b505af11580156113c8573d6000803e3d6000fd5b505050505050505050565b60005b818110156116b95760008383838181106113f2576113f26131fe565b90506020028101906114049190613245565b611412906040810190613265565b9050116114615760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e73666572006044820152606401610435565b828282818110611473576114736131fe565b90506020028101906114859190613245565b611493906020810190613265565b90508383838181106114a7576114a76131fe565b90506020028101906114b99190613245565b6114c7906040810190613265565b9050146115245760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b6064820152608401610435565b6000838383818110611538576115386131fe565b905060200281019061154a9190613245565b611558906020810190613011565b6001600160a01b0316146116095761160483838381811061157b5761157b6131fe565b905060200281019061158d9190613245565b61159b906020810190613011565b8484848181106115ad576115ad6131fe565b90506020028101906115bf9190613245565b6115cd906020810190613265565b8686868181106115df576115df6131fe565b90506020028101906115f19190613245565b6115ff906040810190613265565b612603565b6116a7565b6116a783838381811061161e5761161e6131fe565b90506020028101906116309190613245565b61163e906020810190613011565b848484818110611650576116506131fe565b90506020028101906116629190613245565b611670906020810190613265565b868686818110611682576116826131fe565b90506020028101906116949190613245565b6116a2906040810190613265565b6127b6565b806116b18161322a565b9150506113d6565b505050565b6116ca85333087612a89565b609754604080516312a9293f60e21b815290516000926001600160a01b031691634aa4a4fc916004808301926020929190829003018186803b15801561170f57600080fd5b505afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117479190613317565b90506000805b83811015611c1e576000858583818110611769576117696131fe565b905060200281019061177b9190613245565b611789906040810190613334565b9050116117a85760405162461bcd60e51b8152600401610435906132af565b876001600160a01b031661180660148787858181106117c9576117c96131fe565b90506020028101906117db9190613245565b6117e9906040810190613334565b6117f49291506132dc565b8787858181106110d3576110d36131fe565b6001600160a01b03161461185c5760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e00006044820152606401610435565b600061187560008787858181106110d3576110d36131fe565b9050836001600160a01b0316816001600160a01b03161415611a7d576097546040805160a081019091526001600160a01b039091169063f28c049890808989878181106118c4576118c46131fe565b90506020028101906118d69190613245565b6118e4906040810190613334565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525030602082015263ffffffff8b166040820152606001898987818110611942576119426131fe565b90506020028101906119549190613245565b35815260200189898781811061196c5761196c6131fe565b905060200281019061197e9190613245565b602001358152506040518263ffffffff1660e01b81526004016119a191906133ab565b602060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f3919061341a565b9250836001600160a01b0316632e1a7d4d878785818110611a1657611a166131fe565b9050602002810190611a289190613245565b60405160e083901b6001600160e01b031916815290356004820152602401600060405180830381600087803b158015611a6057600080fd5b505af1158015611a74573d6000803e3d6000fd5b50505050611be2565b6097546040805160a081019091526001600160a01b039091169063f28c04989080898987818110611ab057611ab06131fe565b9050602002810190611ac29190613245565b611ad0906040810190613334565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015263ffffffff8b166040820152606001898987818110611b2e57611b2e6131fe565b9050602002810190611b409190613245565b358152602001898987818110611b5857611b586131fe565b9050602002810190611b6a9190613245565b602001358152506040518263ffffffff1660e01b8152600401611b8d91906133ab565b602060405180830381600087803b158015611ba757600080fd5b505af1158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf919061341a565b92505b60008051602061375c833981519152898285604051611c03939291906132f3565b60405180910390a15080611c168161322a565b91505061174d565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c99919061341a565b90508015611cac57611cac883383612b8f565b5050505050505050565b60008111611d065760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a2056657273696f6e2063616e2774206265203000000000006044820152606401610435565b609a8190556040518181527fd559f56ba9b2c69da3765a6d0208c7f7f352ade55a3be7fb9589ba50aa4ce5f3906020015b60405180910390a150565b666a94d74f4300008110611da45760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b6064820152608401610435565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390602001611d37565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116611e815760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e27742062652030006044820152606401610435565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c990602001611d37565b611edb85333087612a89565b6000804661a4ec14158015611ef257504661aef314155b15611f0257611eff612414565b90505b60005b83811015611c1e576000858583818110611f2157611f216131fe565b9050602002810190611f339190613245565b611f41906040810190613265565b905011611f605760405162461bcd60e51b8152600401610435906132af565b876001600160a01b0316858583818110611f7c57611f7c6131fe565b9050602002810190611f8e9190613245565b611f9c906040810190613265565b6000818110611fad57611fad6131fe565b9050602002016020810190611fc29190613011565b6001600160a01b0316146120185760405162461bcd60e51b815260206004820152601e60248201527f506179726f6c6c3a2053776170206e6f7420746f6b656e206f726967696e00006044820152606401610435565b816001600160a01b0316858583818110612034576120346131fe565b90506020028101906120469190613245565b612054906040810190613265565b6001888886818110612068576120686131fe565b905060200281019061207a9190613245565b612088906040810190613265565b6120939291506132dc565b8181106120a2576120a26131fe565b90506020020160208101906120b79190613011565b6001600160a01b0316141561215c576121558585838181106120db576120db6131fe565b90506020028101906120ed9190613245565b35868684818110612100576121006131fe565b90506020028101906121129190613245565b60200135878785818110612128576121286131fe565b905060200281019061213a9190613245565b612148906040810190613265565b308b63ffffffff16612c88565b92506121ee565b6121eb858583818110612171576121716131fe565b90506020028101906121839190613245565b35868684818110612196576121966131fe565b90506020028101906121a89190613245565b602001358787858181106121be576121be6131fe565b90506020028101906121d09190613245565b6121de906040810190613265565b338b63ffffffff16612d1b565b92505b60008051602061375c83398151915288868684818110612210576122106131fe565b90506020028101906122229190613245565b612230906040810190613265565b6001898987818110612244576122446131fe565b90506020028101906122569190613245565b612264906040810190613265565b61226f9291506132dc565b81811061227e5761227e6131fe565b90506020020160208101906122939190613011565b856040516122a3939291906132f3565b60405180910390a1806122b58161322a565b915050611f05565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916123199190613433565b6000604051808303816000865af19150503d8060008114612356576040519150601f19603f3d011682016040523d82523d6000602084013e61235b565b606091505b50915091508180156123855750805115806123855750808060200190518101906123859190613445565b6109bd5760405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606401610435565b600054610100900460ff166123dd5760405162461bcd60e51b815260040161043590613462565b6105e8612d58565b600054610100900460ff1661240c5760405162461bcd60e51b815260040161043590613462565b6105e8612d86565b609754604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c4648916004808301926020929190829003018186803b15801561245957600080fd5b505afa15801561246d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124919190613317565b905090565b609754604051631788072560e11b81526000916001600160a01b031690632f100e4a9088906124d3908b908a908a908a908a908a906004016134f6565b6000604051808303818588803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526125299190810190613551565b60008151811061253b5761253b6131fe565b602002602001015190509695505050505050565b60008161255d81601461360f565b10156125a05760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b6044820152606401610435565b6125ab82601461360f565b835110156125f35760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610435565b500160200151600160601b900490565b60008060005b858110156126e3576000878783818110612625576126256131fe565b905060200201602081019061263a9190613011565b6001600160a01b031614156126615760405162461bcd60e51b815260040161043590613627565b848482818110612673576126736131fe565b9050602002013582612685919061360f565b91506126d1883389898581811061269e5761269e6131fe565b90506020020160208101906126b39190613011565b8888868181106126c5576126c56131fe565b90506020020135612a89565b806126db8161322a565b915050612609565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d9878787878760405161271b95949392919061366a565b60405180910390a1670de0b6b3a76400006099548261273a91906136ce565b61274491906136ed565b915081156127665760985461276690889033906001600160a01b031685612a89565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d916127a5918a916001600160a01b03169086906132f3565b60405180910390a150505050505050565b60008060005b8581101561292e5760008787838181106127d8576127d86131fe565b90506020020160208101906127ed9190613011565b6001600160a01b031614156128145760405162461bcd60e51b815260040161043590613627565b848482818110612826576128266131fe565b9050602002013582612838919061360f565b9150600087878381811061284e5761284e6131fe565b90506020020160208101906128639190613011565b6001600160a01b031686868481811061287e5761287e6131fe565b9050602002013560405160006040518083038185875af1925050503d80600081146128c5576040519150601f19603f3d011682016040523d82523d6000602084013e6128ca565b606091505b505090508061291b5760405162461bcd60e51b815260206004820152601c60248201527f506179726f6c6c3a20455448207472616e73666572206661696c6564000000006044820152606401610435565b50806129268161322a565b9150506127bc565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d9878787878760405161296695949392919061366a565b60405180910390a1670de0b6b3a76400006099548261298591906136ce565b61298f91906136ed565b91508115612766576129a1828261360f565b6098546040519192506000916001600160a01b039091169084908381818185875af1925050503d80600081146129f3576040519150601f19603f3d011682016040523d82523d6000602084013e6129f8565b606091505b5050905080612a495760405162461bcd60e51b815260206004820181905260248201527f506179726f6c6c3a2045544820666565207472616e73666572206661696c65646044820152606401610435565b506098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d916127a5918a916001600160a01b03169086906132f3565b600080856001600160a01b03166323b872dd60e01b868686604051602401612ab3939291906132f3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612af19190613433565b6000604051808303816000865af19150503d8060008114612b2e576040519150601f19603f3d011682016040523d82523d6000602084013e612b33565b606091505b5091509150818015612b5d575080511580612b5d575080806020019051810190612b5d9190613445565b610d5d5760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606401610435565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612beb9190613433565b6000604051808303816000865af19150503d8060008114612c28576040519150601f19603f3d011682016040523d82523d6000602084013e612c2d565b606091505b5091509150818015612c57575080511580612c57575080806020019051810190612c579190613445565b6109bd5760405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606401610435565b60975460405163962efddb60e01b81526000916001600160a01b03169063962efddb90612cc5908a908a908a908a908a908a908a9060040161370f565b600060405180830381600087803b158015612cdf57600080fd5b505af1158015612cf3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125299190810190613551565b609754604051635190b37760e11b81526000916001600160a01b03169063a32166ee90612cc5908a908a908a908a908a908a908a9060040161370f565b600054610100900460ff16612d7f5760405162461bcd60e51b815260040161043590613462565b6001606555565b600054610100900460ff16612dad5760405162461bcd60e51b815260040161043590613462565b6105e833611dd9565b803563ffffffff81168114612dca57600080fd5b919050565b60008083601f840112612de157600080fd5b50813567ffffffffffffffff811115612df957600080fd5b6020830191508360208260051b8501011115612e1457600080fd5b9250929050565b60008060008060608587031215612e3157600080fd5b84359350612e4160208601612db6565b9250604085013567ffffffffffffffff811115612e5d57600080fd5b612e6987828801612dcf565b95989497509550505050565b6001600160a01b03811681146105c257600080fd5b80151581146105c257600080fd5b60008060408385031215612eab57600080fd5b8235612eb681612e75565b91506020830135612ec681612e8a565b809150509250929050565b60008060008060008060808789031215612eea57600080fd5b86359550612efa60208801612db6565b9450604087013567ffffffffffffffff80821115612f1757600080fd5b612f238a838b01612dcf565b90965094506060890135915080821115612f3c57600080fd5b50612f4989828a01612dcf565b979a9699509497509295939492505050565b600080600080600080600060a0888a031215612f7657600080fd5b8735612f8181612e75565b965060208801359550612f9660408901612db6565b9450606088013567ffffffffffffffff80821115612fb357600080fd5b612fbf8b838c01612dcf565b909650945060808a0135915080821115612fd857600080fd5b50612fe58a828b01612dcf565b989b979a50959850939692959293505050565b60006020828403121561300a57600080fd5b5035919050565b60006020828403121561302357600080fd5b813561302e81612e75565b9392505050565b60008060008060006080868803121561304d57600080fd5b853561305881612e75565b94506020860135935061306d60408701612db6565b9250606086013567ffffffffffffffff81111561308957600080fd5b61309588828901612dcf565b969995985093965092949392505050565b600080602083850312156130b957600080fd5b823567ffffffffffffffff8111156130d057600080fd5b6130dc85828601612dcf565b90969095509350505050565b600080600080608085870312156130fe57600080fd5b843561310981612e75565b9350602085013561311981612e8a565b9250604085013561312981612e75565b9396929550929360600135925050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601690820152752830bcb937b6361d102737ba103ab734b9bbb0b82b1960511b604082015260600190565b602080825260149082015273506179726f6c6c3a20456d70747920737761707360601b604082015260600190565b602080825260169082015275506179726f6c6c3a204e6f7420756e6973776170563360501b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561323e5761323e613214565b5060010190565b60008235605e1983360301811261325b57600080fd5b9190910192915050565b6000808335601e1984360301811261327c57600080fd5b83018035915067ffffffffffffffff82111561329757600080fd5b6020019150600581901b3603821315612e1457600080fd5b6020808252601390820152720a0c2f2e4ded8d874408adae0e8f240e0c2e8d606b1b604082015260600190565b6000828210156132ee576132ee613214565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561332957600080fd5b815161302e81612e75565b6000808335601e1984360301811261334b57600080fd5b83018035915067ffffffffffffffff82111561336657600080fd5b602001915036819003821315612e1457600080fd5b60005b8381101561339657818101518382015260200161337e565b838111156133a5576000848401525b50505050565b602081526000825160a0602084015280518060c08501526133d38160e086016020850161337b565b60018060a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60006020828403121561342c57600080fd5b5051919050565b6000825161325b81846020870161337b565b60006020828403121561345757600080fd5b815161302e81612e8a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8183526000602080850194508260005b858110156134eb5781356134d081612e75565b6001600160a01b0316875295820195908201906001016134bd565b509495945050505050565b86815260a06020820152600061351060a0830187896134ad565b6001600160a01b03958616604084015260608301949094525092166080909201919091529392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561356457600080fd5b825167ffffffffffffffff8082111561357c57600080fd5b818501915085601f83011261359057600080fd5b8151818111156135a2576135a261353b565b8060051b604051601f19603f830116810181811085821117156135c7576135c761353b565b6040529182528482019250838101850191888311156135e557600080fd5b938501935b82851015613603578451845293850193928501926135ea565b98975050505050505050565b6000821982111561362257613622613214565b500190565b60208082526023908201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260408201526265737360e81b606082015260800190565b6001600160a01b038616815260606020820181905260009061368f90830186886134ad565b82810360408401528381526001600160fb1b038411156136ae57600080fd5b8360051b8086602084013760009101602001908152979650505050505050565b60008160001904831182151516156136e8576136e8613214565b500290565b60008261370a57634e487b7160e01b600052601260045260246000fd5b500490565b87815286602082015260c06040820152600061372f60c0830187896134ad565b6001600160a01b039586166060840152608083019490945250921660a09092019190915294935050505056fe2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56a264697066735822122074045fed0bf3a7b1293cb45a47c9630edf92849f3d94f03e87200bc233b1eacb64736f6c63430008090033",
  "devdoc": {
    "author": "Think and Dev Team",
    "kind": "dev",
    "methods": {
      "approveTokens(address[])": {
        "params": {
          "_erc20TokenOrigin": "ERC20 token address to approve."
        }
      },
      "initialize(address,bool,address,uint256)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "params": {
          "_payments": "The array of the Payment data."
        }
      },
      "performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV2AndPaymentETH(uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV2ETH(uint256,uint32,(uint256,uint256,address[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3AndPaymentETH(uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "performSwapV3ETH(uint256,uint32,(uint256,uint256,bytes)[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "Percentage that will be charged."
        }
      },
      "setFeeAddress(address)": {
        "params": {
          "_feeAddress": "Address that will receive the fees."
        }
      },
      "setSwapRouter(address,bool)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Think and Dev Paymentbox",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveTokens(address[])": {
        "notice": "Approves the following token to be used on swapRouter"
      },
      "isSwapV2()": {
        "notice": "Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "notice": "Perform the payments to the given addresses and amounts, public method.Available to send ETH or ERC20."
      },
      "performSwapV2(address,uint256,uint32,(uint256,uint256,address[])[])": {
        "notice": "Perform the swap with Uniswap V2 to the given token addresses and amounts.Swap ERC20 to ERC20."
      },
      "performSwapV2AndPayment(address,uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V2 and the transfer to the given addresses.Swap ERC20 to ERC20.Available to send ETH or ERC20."
      },
      "performSwapV2AndPaymentETH(uint256,uint32,(uint256,uint256,address[])[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V2 and the transfer to the given addresses.Swap ETH to ERC20.Available to send ETH or ERC20."
      },
      "performSwapV2ETH(uint256,uint32,(uint256,uint256,address[])[])": {
        "notice": "Perform the swap with Uniswap V2 to the given token addresses and amounts.Swap ETH to ERC20."
      },
      "performSwapV3(address,uint256,uint32,(uint256,uint256,bytes)[])": {
        "notice": "Perform the swap with Uniswap V3 to the given token addresses and amounts.Swap ERC20 to ERC20."
      },
      "performSwapV3AndPayment(address,uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V3 and the transfer to the given addresses.Swap ERC20 to ERC20.Available to send ETH or ERC20."
      },
      "performSwapV3AndPaymentETH(uint256,uint32,(uint256,uint256,bytes)[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap with Uniswap V3 and the transfer to the given addresses.Swap ETH to ERC20.Available to send ETH or ERC20."
      },
      "performSwapV3ETH(uint256,uint32,(uint256,uint256,bytes)[])": {
        "notice": "Perform the swap with Uniswap V3 to the given token addresses and amounts.Swap ETH to ERC20."
      },
      "setFee(uint256)": {
        "notice": "Set the fee that will be charged, fees are divided by mantissa"
      },
      "setFeeAddress(address)": {
        "notice": "Set the address that will receive the fees."
      },
      "setSwapRouter(address,bool)": {
        "notice": "Set the SwapRouter and the version to be used."
      },
      "swapRouter()": {
        "notice": "Returns the address of the Uniswap protocol router, it could be v2 or v3."
      }
    },
    "notice": "Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3405,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "swapRouter",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3407,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "feeAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3409,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "fee",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 3414,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "version",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 3417,
        "contract": "contracts/PayrollIotex.sol:PayrollIotex",
        "label": "isSwapV2",
        "offset": 0,
        "slot": "155",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}