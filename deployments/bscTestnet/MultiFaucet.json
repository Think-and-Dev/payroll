{
  "address": "0xE11C4E9B79cA717A295e93919835338F308763eB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountToGive",
          "type": "uint256"
        }
      ],
      "name": "addFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "faucets",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToGive",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "requestFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountToGive",
          "type": "uint256"
        }
      ],
      "name": "updateFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a1cc32f93fe609651b4bd9ee183540cbb0f29bee08a6a79dfe7ede4eaf32981",
  "receipt": {
    "to": null,
    "from": "0x62c751F207517c7f0f4f86720Be4e4368f519d67",
    "contractAddress": "0xE11C4E9B79cA717A295e93919835338F308763eB",
    "transactionIndex": 8,
    "gasUsed": "455323",
    "logsBloom": "0x
    "blockHash": "0xe22320d3138d41784db11983959ab3e3bc31bf93e03ceb1c0fdda91f0288469e",
    "transactionHash": "0x1a1cc32f93fe609651b4bd9ee183540cbb0f29bee08a6a79dfe7ede4eaf32981",
    "logs": [],
    "blockNumber": 21845014,
    "cumulativeGasUsed": "795219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "10c9d3225547c452a7fa2baf740aea06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToGive\",\"type\":\"uint256\"}],\"name\":\"addFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"faucets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToGive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"requestFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToGive\",\"type\":\"uint256\"}],\"name\":\"updateFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Think and Dev Team\",\"kind\":\"dev\",\"methods\":{\"addFaucet(address,uint256)\":{\"params\":{\"_amountToGive\":\"amount that the faucet will give.\",\"_token\":\"ERC20 token address.\"}},\"removeFaucet(address)\":{\"params\":{\"_token\":\"ERC20 token address.\"}},\"requestFunds(address)\":{\"params\":{\"_token\":\"ERC20 token address.\"}},\"updateFaucet(address,uint256)\":{\"params\":{\"_amountToGive\":\"new amount that the faucet will give.\",\"_token\":\"ERC20 token address.\"}}},\"title\":\"Think and Dev Faucet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFaucet(address,uint256)\":{\"notice\":\"Add a new faucet to the faucets mapping.\"},\"removeFaucet(address)\":{\"notice\":\"Remove a faucet from the faucets mapping. Only the faucet owner can perform this action.\"},\"requestFunds(address)\":{\"notice\":\"Gives to the msg.sender the amount of funds specified in amountToGive\"},\"updateFaucet(address,uint256)\":{\"notice\":\"Update the amountToGive to a faucet. Only the faucet owner can perform this action.\"}},\"notice\":\"Multiple ERC20 faucet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"MultiFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Faucet.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\n/**\\n * @title Think and Dev Faucet\\n * @author Think and Dev Team\\n * @notice Multiple ERC20 faucet\\n */\\ncontract MultiFaucet {\\n    struct Faucet {\\n        address owner;\\n        uint256 amountToGive;\\n    }\\n\\n    mapping(address => Faucet) public faucets;\\n\\n    modifier onlyOwner(address _token) {\\n        require(msg.sender == faucets[_token].owner, \\\"MultiFaucet: You are not the owner of this faucet\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Add a new faucet to the faucets mapping.\\n     * @param _token ERC20 token address.\\n     * @param _amountToGive amount that the faucet will give.\\n     */\\n    function addFaucet(address _token, uint256 _amountToGive) external {\\n        require(\\n            faucets[_token].owner == address(0),\\n            \\\"MultiFaucet: This faucet already exist, you can still deposit funds\\\"\\n        );\\n        faucets[_token] = Faucet(msg.sender, _amountToGive);\\n    }\\n\\n    /**\\n     * Update the amountToGive to a faucet. Only the faucet owner can perform this action.\\n     * @param _token ERC20 token address.\\n     * @param _amountToGive new amount that the faucet will give.\\n     */\\n    function updateFaucet(address _token, uint256 _amountToGive) external onlyOwner(_token) {\\n        faucets[_token].amountToGive = _amountToGive;\\n    }\\n\\n    /**\\n     * Remove a faucet from the faucets mapping. Only the faucet owner can perform this action.\\n     * @param _token ERC20 token address.\\n     */\\n    function removeFaucet(address _token) external onlyOwner(_token) {\\n        uint256 faucetBalance = IERC20Basic(_token).balanceOf(address(this));\\n        TransferHelper.safeTransfer(_token, msg.sender, faucetBalance);\\n        delete faucets[_token];\\n    }\\n\\n    /**\\n     * Gives to the msg.sender the amount of funds specified in amountToGive\\n     * @param _token ERC20 token address.\\n     */\\n    function requestFunds(address _token) external {\\n        require(faucets[_token].amountToGive != 0, \\\"MultiFaucet: This faucet does not exist\\\");\\n        uint256 faucetBalance = IERC20Basic(_token).balanceOf(address(this));\\n        require(faucetBalance >= faucets[_token].amountToGive, \\\"MultiFaucet: This faucet does not have enough funds\\\");\\n        TransferHelper.safeTransfer(_token, msg.sender, faucets[_token].amountToGive);\\n    }\\n}\\n\",\"keccak256\":\"0x256e3c16d3bb16b26c435a012facfa0a137e4d9484e8462b3a4cbce8b6e4b985\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610746806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806307229f141461005c578063435d7d8714610071578063544c7cf9146100c757806390f534ce146100da578063bd3f756e146100ed575b600080fd5b61006f61006a3660046105fd565b610100565b005b6100a461007f3660046105fd565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520160405180910390f35b61006f6100d53660046105fd565b6101f8565b61006f6100e836600461061f565b6103a1565b61006f6100fb36600461061f565b610486565b6001600160a01b0381811660009081526020819052604090205482911633146101445760405162461bcd60e51b815260040161013b90610649565b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561018657600080fd5b505afa15801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061069a565b90506101cb8333836104e1565b50506001600160a01b0316600090815260208190526040812080546001600160a01b031916815560010155565b6001600160a01b0381166000908152602081905260409020600101546102705760405162461bcd60e51b815260206004820152602760248201527f4d756c74694661756365743a20546869732066617563657420646f6573206e6f6044820152661d08195e1a5cdd60ca1b606482015260840161013b565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea919061069a565b6001600160a01b0383166000908152602081905260409020600101549091508110156103745760405162461bcd60e51b815260206004820152603360248201527f4d756c74694661756365743a20546869732066617563657420646f6573206e6f60448201527274206861766520656e6f7567682066756e647360681b606482015260840161013b565b6001600160a01b03821660009081526020819052604090206001015461039d90839033906104e1565b5050565b6001600160a01b03828116600090815260208190526040902054161561043b5760405162461bcd60e51b815260206004820152604360248201527f4d756c74694661756365743a20546869732066617563657420616c726561647960448201527f2065786973742c20796f752063616e207374696c6c206465706f7369742066756064820152626e647360e81b608482015260a40161013b565b60408051808201825233815260208082019384526001600160a01b0394851660009081529081905291909120905181546001600160a01b031916931692909217825551600190910155565b6001600160a01b0382811660009081526020819052604090205483911633146104c15760405162461bcd60e51b815260040161013b90610649565b506001600160a01b03909116600090815260208190526040902060010155565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161053d91906106b3565b6000604051808303816000865af19150503d806000811461057a576040519150601f19603f3d011682016040523d82523d6000602084013e61057f565b606091505b50915091508180156105a95750805115806105a95750808060200190518101906105a991906106ee565b6105da5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161013b565b5050505050565b80356001600160a01b03811681146105f857600080fd5b919050565b60006020828403121561060f57600080fd5b610618826105e1565b9392505050565b6000806040838503121561063257600080fd5b61063b836105e1565b946020939093013593505050565b60208082526031908201527f4d756c74694661756365743a20596f7520617265206e6f7420746865206f776e604082015270195c881bd9881d1a1a5cc819985d58d95d607a1b606082015260800190565b6000602082840312156106ac57600080fd5b5051919050565b6000825160005b818110156106d457602081860181015185830152016106ba565b818111156106e3576000828501525b509190910192915050565b60006020828403121561070057600080fd5b8151801515811461061857600080fdfea2646970667358221220799492afe17ec1f9a31a46af45185641a81e149b302a10ba7f3023b975ca10e364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806307229f141461005c578063435d7d8714610071578063544c7cf9146100c757806390f534ce146100da578063bd3f756e146100ed575b600080fd5b61006f61006a3660046105fd565b610100565b005b6100a461007f3660046105fd565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520160405180910390f35b61006f6100d53660046105fd565b6101f8565b61006f6100e836600461061f565b6103a1565b61006f6100fb36600461061f565b610486565b6001600160a01b0381811660009081526020819052604090205482911633146101445760405162461bcd60e51b815260040161013b90610649565b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561018657600080fd5b505afa15801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061069a565b90506101cb8333836104e1565b50506001600160a01b0316600090815260208190526040812080546001600160a01b031916815560010155565b6001600160a01b0381166000908152602081905260409020600101546102705760405162461bcd60e51b815260206004820152602760248201527f4d756c74694661756365743a20546869732066617563657420646f6573206e6f6044820152661d08195e1a5cdd60ca1b606482015260840161013b565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea919061069a565b6001600160a01b0383166000908152602081905260409020600101549091508110156103745760405162461bcd60e51b815260206004820152603360248201527f4d756c74694661756365743a20546869732066617563657420646f6573206e6f60448201527274206861766520656e6f7567682066756e647360681b606482015260840161013b565b6001600160a01b03821660009081526020819052604090206001015461039d90839033906104e1565b5050565b6001600160a01b03828116600090815260208190526040902054161561043b5760405162461bcd60e51b815260206004820152604360248201527f4d756c74694661756365743a20546869732066617563657420616c726561647960448201527f2065786973742c20796f752063616e207374696c6c206465706f7369742066756064820152626e647360e81b608482015260a40161013b565b60408051808201825233815260208082019384526001600160a01b0394851660009081529081905291909120905181546001600160a01b031916931692909217825551600190910155565b6001600160a01b0382811660009081526020819052604090205483911633146104c15760405162461bcd60e51b815260040161013b90610649565b506001600160a01b03909116600090815260208190526040902060010155565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161053d91906106b3565b6000604051808303816000865af19150503d806000811461057a576040519150601f19603f3d011682016040523d82523d6000602084013e61057f565b606091505b50915091508180156105a95750805115806105a95750808060200190518101906105a991906106ee565b6105da5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161013b565b5050505050565b80356001600160a01b03811681146105f857600080fd5b919050565b60006020828403121561060f57600080fd5b610618826105e1565b9392505050565b6000806040838503121561063257600080fd5b61063b836105e1565b946020939093013593505050565b60208082526031908201527f4d756c74694661756365743a20596f7520617265206e6f7420746865206f776e604082015270195c881bd9881d1a1a5cc819985d58d95d607a1b606082015260800190565b6000602082840312156106ac57600080fd5b5051919050565b6000825160005b818110156106d457602081860181015185830152016106ba565b818111156106e3576000828501525b509190910192915050565b60006020828403121561070057600080fd5b8151801515811461061857600080fdfea2646970667358221220799492afe17ec1f9a31a46af45185641a81e149b302a10ba7f3023b975ca10e364736f6c63430008090033",
  "devdoc": {
    "author": "Think and Dev Team",
    "kind": "dev",
    "methods": {
      "addFaucet(address,uint256)": {
        "params": {
          "_amountToGive": "amount that the faucet will give.",
          "_token": "ERC20 token address."
        }
      },
      "removeFaucet(address)": {
        "params": {
          "_token": "ERC20 token address."
        }
      },
      "requestFunds(address)": {
        "params": {
          "_token": "ERC20 token address."
        }
      },
      "updateFaucet(address,uint256)": {
        "params": {
          "_amountToGive": "new amount that the faucet will give.",
          "_token": "ERC20 token address."
        }
      }
    },
    "title": "Think and Dev Faucet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFaucet(address,uint256)": {
        "notice": "Add a new faucet to the faucets mapping."
      },
      "removeFaucet(address)": {
        "notice": "Remove a faucet from the faucets mapping. Only the faucet owner can perform this action."
      },
      "requestFunds(address)": {
        "notice": "Gives to the msg.sender the amount of funds specified in amountToGive"
      },
      "updateFaucet(address,uint256)": {
        "notice": "Update the amountToGive to a faucet. Only the faucet owner can perform this action."
      }
    },
    "notice": "Multiple ERC20 faucet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3108,
        "contract": "contracts/Faucet.sol:MultiFaucet",
        "label": "faucets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Faucet)3103_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Faucet)3103_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiFaucet.Faucet)",
        "numberOfBytes": "32",
        "value": "t_struct(Faucet)3103_storage"
      },
      "t_struct(Faucet)3103_storage": {
        "encoding": "inplace",
        "label": "struct MultiFaucet.Faucet",
        "members": [
          {
            "astId": 3100,
            "contract": "contracts/Faucet.sol:MultiFaucet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3102,
            "contract": "contracts/Faucet.sol:MultiFaucet",
            "label": "amountToGive",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}