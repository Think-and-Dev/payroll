{
  "address": "0x330D5e843c66e3e86c045f6442cA0106d8E10F77",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPaymentFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "FeeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "FeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "SwapRouterChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MANTISSA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20TokenOrigin",
          "type": "address[]"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapV2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performMultiPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct Payroll.Swap[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapAndPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapBasic",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc65efb603430f2cb5707e1506faf2d650d4a4d030d2b61562a78e06f6fac33e",
  "receipt": {
    "to": null,
    "from": "0x62c751F207517c7f0f4f86720Be4e4368f519d67",
    "contractAddress": "0x330D5e843c66e3e86c045f6442cA0106d8E10F77",
    "transactionIndex": 1,
    "gasUsed": "1541834",
    "logsBloom": "0x
    "blockHash": "0x81342921382bb921d4edb80b4c49e512fbf5cf5c41de67acaccfa3d77121ee63",
    "transactionHash": "0xbc65efb603430f2cb5707e1506faf2d650d4a4d030d2b61562a78e06f6fac33e",
    "logs": [],
    "blockNumber": 19567529,
    "cumulativeGasUsed": "1562834",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "244384d782095884c90e433852d10f63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPaymentFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"SwapRouterChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address[]\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performMultiPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct Payroll.Swap[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapAndPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapBasic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Think and Dev Team\",\"kind\":\"dev\",\"methods\":{\"approveTokens(address[])\":{\"params\":{\"_erc20TokenOrigin\":\"ERC20 token address to approve.\"}},\"initialize(address,bool,address,uint256)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"params\":{\"_payments\":\"The array of the Payment data.\"}},\"performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail.\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another.\",\"_payments\":\"The array of the Payment data.\",\"_swaps\":\"The array of the Swaps data.\",\"_totalAmountToSwap\":\"Total amount of erc20TokenOrigin to spend in swaps.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"Percentage that will be charged.\"}},\"setFeeAddress(address)\":{\"params\":{\"_feeAddress\":\"Address that will receive the fees.\"}},\"setSwapRouter(address,bool)\":{\"params\":{\"_isSwapV2\":\"Boolean to specify the version of the router; true means v2, false means v3.\",\"_swapRouter\":\"Router address to execute swaps.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Think and Dev Paymentbox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveTokens(address[])\":{\"notice\":\"Approves the following token to be used on swapRouter\"},\"isSwapV2()\":{\"notice\":\"Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"notice\":\"Perform the payments to the given addresses and amounts, public method.\"},\"performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,address[],uint256[])[])\":{\"notice\":\"Perform the swap and the transfer to the given addresses.Currently the function only works with ERC20 tokens.\"},\"setFee(uint256)\":{\"notice\":\"Set the fee that will be charged, fees are divided by mantissa\"},\"setFeeAddress(address)\":{\"notice\":\"Set the address that will receive the fees.\"},\"setSwapRouter(address,bool)\":{\"notice\":\"Set the SwapRouter and the version to be used.\"},\"swapRouter()\":{\"notice\":\"Returns the address of the Uniswap protocol router, it could be v2 or v3.\"}},\"notice\":\"Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payroll.sol\":\"Payroll\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"./interfaces/IUniswapBasic.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\n/**\\n * @title Think and Dev Paymentbox\\n * @author Think and Dev Team\\n * @notice Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction.\\n * Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.\\n */\\ncontract Payroll is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    /**\\n     * Returns the address of the Uniswap protocol router, it could be v2 or v3.\\n     */\\n    IUniswapBasic public swapRouter;\\n    address public feeAddress;\\n    uint256 public fee;\\n    uint256 public constant MANTISSA = 1e18;\\n\\n    /**\\n     * Returns if the contract is working with a v2 Uniswap protocol;\\n     * true means v2, false means v3.\\n     */\\n    bool public isSwapV2;\\n\\n    struct Payment {\\n        address token;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n\\n    struct Swap {\\n        address token;\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        uint24 poolFee;\\n    }\\n\\n    event SwapRouterChanged(address _swapRouter, bool _isSwapV2);\\n    event FeeChanged(uint256 _fee);\\n    event FeeCharged(address _erc20TokenAddress, address _feeAddress, uint256 _fees);\\n    event FeeAddressChanged(address _feeAddress);\\n    event BatchPaymentFinished(address _erc20TokenAddress, address[] _receivers, uint256[] _amountsToTransfer);\\n    event SwapFinished(address _tokenIn, address _tokenOut, uint256 _amountReceived);\\n\\n    /**\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function initialize(\\n        address _swapRouter,\\n        bool _isSwapV2,\\n        address _feeAddress,\\n        uint256 _fee\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n        _setFeeAddress(_feeAddress);\\n        _setFee(_fee);\\n    }\\n\\n    /**\\n     * Set the fee that will be charged, fees are divided by mantissa\\n     * @param _fee Percentage that will be charged.\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    function _setFee(uint256 _fee) internal {\\n        require(_fee < 3e16, \\\"Payroll: Fee should be less than 3%\\\");\\n        fee = _fee;\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n     * Set the address that will receive the fees.\\n     * @param _feeAddress Address that will receive the fees.\\n     */\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        _setFeeAddress(_feeAddress);\\n    }\\n\\n    function _setFeeAddress(address _feeAddress) internal {\\n        require(_feeAddress != address(0), \\\"Payroll: Fee address can't be 0\\\");\\n        feeAddress = _feeAddress;\\n        emit FeeAddressChanged(_feeAddress);\\n    }\\n\\n    /**\\n     * Set the SwapRouter and the version to be used.\\n     * @param _swapRouter Router address to execute swaps.\\n     * @param _isSwapV2 Boolean to specify the version of the router; true means v2, false means v3.\\n     */\\n    function setSwapRouter(address _swapRouter, bool _isSwapV2) external onlyOwner {\\n        _setSwapRouter(_swapRouter, _isSwapV2);\\n    }\\n\\n    function _setSwapRouter(address _swapRouter, bool _isSwapV2) internal {\\n        require(_swapRouter != address(0), \\\"Payroll: Cannot set a 0 address as swapRouter\\\");\\n        isSwapV2 = _isSwapV2;\\n        swapRouter = IUniswapBasic(_swapRouter);\\n        emit SwapRouterChanged(_swapRouter, _isSwapV2);\\n    }\\n\\n    /**\\n     * Approves the following token to be used on swapRouter\\n     * @param _erc20TokenOrigin ERC20 token address to approve.\\n     */\\n    function approveTokens(address[] calldata _erc20TokenOrigin) external nonReentrant {\\n        for (uint256 i = 0; i < _erc20TokenOrigin.length; i++) {\\n            // approves the swapRouter to spend totalAmountToSpend of erc20TokenOrigin\\n            TransferHelper.safeApprove(_erc20TokenOrigin[i], address(swapRouter), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * Perform the swap and the transfer to the given addresses.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     * @param _payments The array of the Payment data.\\n     * @notice Currently the function only works with ERC20 tokens.\\n     */\\n    function performSwapAndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        Swap[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external nonReentrant {\\n        if (_swaps.length > 0) {\\n            _performSwap(_erc20TokenOrigin, _totalAmountToSwap, _deadline, _swaps);\\n        }\\n\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the swap to the given token addresses and amounts.\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another.\\n     * @param _totalAmountToSwap Total amount of erc20TokenOrigin to spend in swaps.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @param _swaps The array of the Swaps data.\\n     */\\n    function _performSwap(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSwap,\\n        uint32 _deadline,\\n        Swap[] calldata _swaps\\n    ) internal {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSwap);\\n\\n        // determines which version of uniswap protocol will be used to perform the swap\\n        if (isSwapV2) {\\n            for (uint256 i = 0; i < _swaps.length; i++) {\\n                _swapTokensForExactTokens(\\n                    _erc20TokenOrigin,\\n                    _swaps[i].token,\\n                    _swaps[i].amountOut,\\n                    _swaps[i].amountInMax,\\n                    _deadline\\n                );\\n            }\\n        } else {\\n            for (uint256 i = 0; i < _swaps.length; i++) {\\n                _swapExactOutputSingle(\\n                    _erc20TokenOrigin,\\n                    _swaps[i].token,\\n                    _swaps[i].poolFee,\\n                    _swaps[i].amountOut,\\n                    _swaps[i].amountInMax,\\n                    _deadline\\n                );\\n            }\\n        }\\n        uint256 leftOver = IERC20Basic(_erc20TokenOrigin).balanceOf(address(this));\\n        if (leftOver > 0) {\\n            // return the leftover of _erc20TokenOrigin\\n            TransferHelper.safeTransfer(_erc20TokenOrigin, msg.sender, leftOver);\\n        }\\n    }\\n\\n    /**\\n     * Perform ERC20 tokens swap using UniSwap v2 protocol.\\n     * @param _tokenIn ERC20 token address to swap for another.\\n     * @param _tokenOut ERC20 token address to receive.\\n     * @param _amountOut Exact amount of tokenOut to receive.\\n     * @param _amountInMax Max amount of tokenIn to pay.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     */\\n    function _swapTokensForExactTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint32 _deadline\\n    ) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        // return the amount spend of tokenIn\\n        uint256 amountIn = swapRouter.swapTokensForExactTokens(_amountOut, _amountInMax, path, msg.sender, _deadline)[\\n            0\\n        ];\\n        emit SwapFinished(_tokenIn, _tokenOut, amountIn);\\n    }\\n\\n    /**\\n     * Perform ERC20 tokens swap using UniSwap v3 protocol.\\n     * @param _tokenIn ERC20 token address to swap for another.\\n     * @param _tokenOut ERC20 token address to receive.\\n     * @param _poolFee Pool fee tokenIn/tokenOut.\\n     * @param _amountOut Exact amount of tokenOut to receive.\\n     * @param _amountInMax Max amount of tokenIn to pay.\\n     * @param _deadline The unix timestamp after a swap will fail.\\n     * @notice Currently the function only works with single pools tokenIn/tokenOut.\\n     */\\n    function _swapExactOutputSingle(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint24 _poolFee,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint32 _deadline\\n    ) internal {\\n        // return the amount spend of tokenIn\\n        uint256 amountIn = swapRouter.exactOutputSingle(\\n            IUniswapBasic.ExactOutputSingleParams({\\n                tokenIn: _tokenIn,\\n                tokenOut: _tokenOut,\\n                fee: _poolFee,\\n                recipient: msg.sender,\\n                deadline: _deadline,\\n                amountOut: _amountOut,\\n                amountInMaximum: _amountInMax,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        emit SwapFinished(_tokenIn, _tokenOut, amountIn);\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, public method.\\n     * @param _payments The array of the Payment data.\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) external nonReentrant {\\n        _performMultiPayment(_payments);\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, internal method.\\n     * @param _payments The array of the Payment data.\\n     */\\n    function _performMultiPayment(Payment[] calldata _payments) internal {\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            _performPayment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n        }\\n    }\\n\\n    /**\\n     * Performs the payment to the given addresses.\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer.\\n     * @param _receivers The array of payment receivers.\\n     * @param _amountsToTransfer The array of payments' amounts to perform.\\n     * The amount will be transfered to the address on _receivers with the same index.\\n     */\\n    function _performPayment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        require(_erc20TokenAddress != address(0), \\\"Payroll: Token is 0 address\\\");\\n        require(_amountsToTransfer.length > 0, \\\"Payroll: No amounts to transfer\\\");\\n        require(_amountsToTransfer.length == _receivers.length, \\\"Payroll: Arrays must have same length\\\");\\n\\n        uint256 acumulatedFee = 0;\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Payroll: Cannot send to a 0 address\\\");\\n            acumulatedFee = acumulatedFee + (_amountsToTransfer[i] * fee) / MANTISSA;\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, _receivers[i], _amountsToTransfer[i]);\\n        }\\n        emit BatchPaymentFinished(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n        if (acumulatedFee > 0) {\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, feeAddress, acumulatedFee);\\n        }\\n        emit FeeCharged(_erc20TokenAddress, feeAddress, acumulatedFee);\\n    }\\n}\\n\",\"keccak256\":\"0x6f9305383a4bdb7ef3efedc92fd5cc9d53fb37b16e686792b870d5be7da093e2\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IUniswapBasic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title UniswapBasic\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapBasic {\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x211d0bcc3540c9b86cbaa125bdcb0125094218c4a4db984e4a80f97bda1f3d72\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611aed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063ddca3f4311610066578063ddca3f43146101e7578063ef6aa264146101f0578063f2fde38b14610203578063f65a83cf1461021657600080fd5b80638da5cb5b1461019d578063ac43070b146101ae578063c31c9c07146101c1578063db9d0334146101d457600080fd5b806369fe0e2d116100d357806369fe0e2d1461015c578063715018a61461016f5780638705fcd414610177578063895305bc1461018a57600080fd5b80632171dcc9146100fa5780632703984c1461010f5780634127535814610131575b600080fd5b61010d61010836600461143b565b610233565b005b61011e670de0b6b3a764000081565b6040519081526020015b60405180910390f35b609854610144906001600160a01b031681565b6040516001600160a01b039091168152602001610128565b61010d61016a366004611472565b610274565b61010d6102aa565b61010d61018536600461148b565b6102e0565b61010d6101983660046114f9565b610313565b6033546001600160a01b0316610144565b61010d6101bc3660046115d0565b610366565b609754610144906001600160a01b031681565b61010d6101e23660046115d0565b6103f3565b61011e60995481565b61010d6101fe366004611612565b61042e565b61010d61021136600461148b565b610517565b609a546102239060ff1681565b6040519015158152602001610128565b6033546001600160a01b031633146102665760405162461bcd60e51b815260040161025d9061165f565b60405180910390fd5b61027082826105af565b5050565b6033546001600160a01b0316331461029e5760405162461bcd60e51b815260040161025d9061165f565b6102a781610688565b50565b6033546001600160a01b031633146102d45760405162461bcd60e51b815260040161025d9061165f565b6102de6000610726565b565b6033546001600160a01b0316331461030a5760405162461bcd60e51b815260040161025d9061165f565b6102a781610778565b600260655414156103365760405162461bcd60e51b815260040161025d90611694565b6002606555821561034e5761034e878787878761081c565b6103588282610a08565b505060016065555050505050565b600260655414156103895760405162461bcd60e51b815260040161025d90611694565b600260655560005b818110156103e9576103d78383838181106103ae576103ae6116cb565b90506020020160208101906103c3919061148b565b6097546001600160a01b0316600019610ac8565b806103e1816116f7565b915050610391565b5050600160655550565b600260655414156104165760405162461bcd60e51b815260040161025d90611694565b60026065556104258282610a08565b50506001606555565b600054610100900460ff166104495760005460ff161561044d565b303b155b6104b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161025d565b600054610100900460ff161580156104d2576000805461ffff19166101011790555b6104da610bc1565b6104e2610bf0565b6104ec85856105af565b6104f583610778565b6104fe82610688565b8015610510576000805461ff00191690555b5050505050565b6033546001600160a01b031633146105415760405162461bcd60e51b815260040161025d9061165f565b6001600160a01b0381166105a65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161025d565b6102a781610726565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b606482015260840161025d565b609a805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b666a94d74f43000081106106ea5760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b606482015260840161025d565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166107ce5760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e2774206265203000604482015260640161025d565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c99060200161071b565b61082885333087610c1f565b609a5460ff16156108c05760005b818110156108ba576108a886848484818110610854576108546116cb565b61086a926020608090920201908101915061148b565b85858581811061087c5761087c6116cb565b90506080020160200135868686818110610898576108986116cb565b9050608002016040013588610d25565b806108b2816116f7565b915050610836565b50610973565b60005b818110156109715761095f868484848181106108e1576108e16116cb565b6108f7926020608090920201908101915061148b565b858585818110610909576109096116cb565b90506080020160600160208101906109219190611712565b868686818110610933576109336116cb565b9050608002016020013587878781811061094f5761094f6116cb565b9050608002016040013589610e8e565b80610969816116f7565b9150506108c3565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611737565b90508015610a0057610a00863383610fd2565b505050505050565b60005b81811015610ac357610ab1838383818110610a2857610a286116cb565b9050602002810190610a3a9190611750565b610a4890602081019061148b565b848484818110610a5a57610a5a6116cb565b9050602002810190610a6c9190611750565b610a7a906020810190611770565b868686818110610a8c57610a8c6116cb565b9050602002810190610a9e9190611750565b610aac906040810190611770565b6110cb565b80610abb816116f7565b915050610a0b565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610b2491906117ba565b6000604051808303816000865af19150503d8060008114610b61576040519150601f19603f3d011682016040523d82523d6000602084013e610b66565b606091505b5091509150818015610b90575080511580610b90575080806020019051810190610b9091906117f5565b6105105760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161025d565b600054610100900460ff16610be85760405162461bcd60e51b815260040161025d90611812565b6102de6113b3565b600054610100900460ff16610c175760405162461bcd60e51b815260040161025d90611812565b6102de6113e1565b600080856001600160a01b03166323b872dd60e01b868686604051602401610c499392919061185d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610c8791906117ba565b6000604051808303816000865af19150503d8060008114610cc4576040519150601f19603f3d011682016040523d82523d6000602084013e610cc9565b606091505b5091509150818015610cf3575080511580610cf3575080806020019051810190610cf391906117f5565b610a005760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015260640161025d565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110610d5a57610d5a6116cb565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610d8e57610d8e6116cb565b6001600160a01b039283166020918202929092010152609754604051634401edf760e11b81526000929190911690638803dbee90610dd89088908890879033908a90600401611897565b600060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2e9190810190611913565b600081518110610e4057610e406116cb565b602002602001015190507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56878783604051610e7d9392919061185d565b60405180910390a150505050505050565b60975460408051610100810182526001600160a01b0389811682528881166020830190815262ffffff898116848601908152336060860190815263ffffffff89166080870190815260a087018c815260c088018c8152600060e08a018181529a51631b67c43360e31b81529951891660048b01529651881660248a015293519094166044880152905185166064870152516084860152905160a48501525160c48401529251811660e48301529192919091169063db3e21989061010401602060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190611737565b90507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56878783604051610e7d9392919061185d565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161102e91906117ba565b6000604051808303816000865af19150503d806000811461106b576040519150601f19603f3d011682016040523d82523d6000602084013e611070565b606091505b509150915081801561109a57508051158061109a57508080602001905181019061109a91906117f5565b6105105760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161025d565b6001600160a01b0385166111215760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a20546f6b656e206973203020616464726573730000000000604482015260640161025d565b8061116e5760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e7366657200604482015260640161025d565b8083146111cb5760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b606482015260840161025d565b6000805b848110156113045760008686838181106111eb576111eb6116cb565b9050602002016020810190611200919061148b565b6001600160a01b031614156112635760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260448201526265737360e81b606482015260840161025d565b670de0b6b3a7640000609954858584818110611281576112816116cb565b9050602002013561129291906119d1565b61129c91906119f0565b6112a69083611a12565b91506112f287338888858181106112bf576112bf6116cb565b90506020020160208101906112d4919061148b565b8787868181106112e6576112e66116cb565b90506020020135610c1f565b806112fc816116f7565b9150506111cf565b507f12bf982271e0dbba6878628c37389b80d96734e56444e0fa59baf971be04c1b5868686868660405161133c959493929190611a2a565b60405180910390a180156113645760985461136490879033906001600160a01b031684610c1f565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d916113a39189916001600160a01b031690859061185d565b60405180910390a1505050505050565b600054610100900460ff166113da5760405162461bcd60e51b815260040161025d90611812565b6001606555565b600054610100900460ff166114085760405162461bcd60e51b815260040161025d90611812565b6102de33610726565b80356001600160a01b038116811461142857600080fd5b919050565b80151581146102a757600080fd5b6000806040838503121561144e57600080fd5b61145783611411565b915060208301356114678161142d565b809150509250929050565b60006020828403121561148457600080fd5b5035919050565b60006020828403121561149d57600080fd5b6114a682611411565b9392505050565b60008083601f8401126114bf57600080fd5b50813567ffffffffffffffff8111156114d757600080fd5b6020830191508360208260051b85010111156114f257600080fd5b9250929050565b600080600080600080600060a0888a03121561151457600080fd5b61151d88611411565b965060208801359550604088013563ffffffff8116811461153d57600080fd5b9450606088013567ffffffffffffffff8082111561155a57600080fd5b818a0191508a601f83011261156e57600080fd5b81358181111561157d57600080fd5b8b60208260071b850101111561159257600080fd5b6020830196508095505060808a01359150808211156115b057600080fd5b506115bd8a828b016114ad565b989b979a50959850939692959293505050565b600080602083850312156115e357600080fd5b823567ffffffffffffffff8111156115fa57600080fd5b611606858286016114ad565b90969095509350505050565b6000806000806080858703121561162857600080fd5b61163185611411565b935060208501356116418161142d565b925061164f60408601611411565b9396929550929360600135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561170b5761170b6116e1565b5060010190565b60006020828403121561172457600080fd5b813562ffffff811681146114a657600080fd5b60006020828403121561174957600080fd5b5051919050565b60008235605e1983360301811261176657600080fd5b9190910192915050565b6000808335601e1984360301811261178757600080fd5b83018035915067ffffffffffffffff8211156117a257600080fd5b6020019150600581901b36038213156114f257600080fd5b6000825160005b818110156117db57602081860181015185830152016117c1565b818111156117ea576000828501525b509190910192915050565b60006020828403121561180757600080fd5b81516114a68161142d565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156118e75784516001600160a01b0316835293830193918301916001016118c2565b50506001600160a01b0396909616606085015250505063ffffffff919091166080909101529392505050565b6000602080838503121561192657600080fd5b825167ffffffffffffffff8082111561193e57600080fd5b818501915085601f83011261195257600080fd5b81518181111561196457611964611881565b8060051b604051601f19603f8301168101818110858211171561198957611989611881565b6040529182528482019250838101850191888311156119a757600080fd5b938501935b828510156119c5578451845293850193928501926119ac565b98975050505050505050565b60008160001904831182151516156119eb576119eb6116e1565b500290565b600082611a0d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611a2557611a256116e1565b500190565b6001600160a01b03868116825260606020808401829052908301869052600091879160808501845b89811015611a775783611a6486611411565b1682529382019390820190600101611a52565b5085810360408701528681526001600160fb1b03871115611a9757600080fd5b8660051b935083888383013760009301019182525097965050505050505056fea26469706673582212201b057c2547a4ed0f6f88581322c91cd02cf104dc8fb74cd90bcb563e130e51c464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063ddca3f4311610066578063ddca3f43146101e7578063ef6aa264146101f0578063f2fde38b14610203578063f65a83cf1461021657600080fd5b80638da5cb5b1461019d578063ac43070b146101ae578063c31c9c07146101c1578063db9d0334146101d457600080fd5b806369fe0e2d116100d357806369fe0e2d1461015c578063715018a61461016f5780638705fcd414610177578063895305bc1461018a57600080fd5b80632171dcc9146100fa5780632703984c1461010f5780634127535814610131575b600080fd5b61010d61010836600461143b565b610233565b005b61011e670de0b6b3a764000081565b6040519081526020015b60405180910390f35b609854610144906001600160a01b031681565b6040516001600160a01b039091168152602001610128565b61010d61016a366004611472565b610274565b61010d6102aa565b61010d61018536600461148b565b6102e0565b61010d6101983660046114f9565b610313565b6033546001600160a01b0316610144565b61010d6101bc3660046115d0565b610366565b609754610144906001600160a01b031681565b61010d6101e23660046115d0565b6103f3565b61011e60995481565b61010d6101fe366004611612565b61042e565b61010d61021136600461148b565b610517565b609a546102239060ff1681565b6040519015158152602001610128565b6033546001600160a01b031633146102665760405162461bcd60e51b815260040161025d9061165f565b60405180910390fd5b61027082826105af565b5050565b6033546001600160a01b0316331461029e5760405162461bcd60e51b815260040161025d9061165f565b6102a781610688565b50565b6033546001600160a01b031633146102d45760405162461bcd60e51b815260040161025d9061165f565b6102de6000610726565b565b6033546001600160a01b0316331461030a5760405162461bcd60e51b815260040161025d9061165f565b6102a781610778565b600260655414156103365760405162461bcd60e51b815260040161025d90611694565b6002606555821561034e5761034e878787878761081c565b6103588282610a08565b505060016065555050505050565b600260655414156103895760405162461bcd60e51b815260040161025d90611694565b600260655560005b818110156103e9576103d78383838181106103ae576103ae6116cb565b90506020020160208101906103c3919061148b565b6097546001600160a01b0316600019610ac8565b806103e1816116f7565b915050610391565b5050600160655550565b600260655414156104165760405162461bcd60e51b815260040161025d90611694565b60026065556104258282610a08565b50506001606555565b600054610100900460ff166104495760005460ff161561044d565b303b155b6104b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161025d565b600054610100900460ff161580156104d2576000805461ffff19166101011790555b6104da610bc1565b6104e2610bf0565b6104ec85856105af565b6104f583610778565b6104fe82610688565b8015610510576000805461ff00191690555b5050505050565b6033546001600160a01b031633146105415760405162461bcd60e51b815260040161025d9061165f565b6001600160a01b0381166105a65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161025d565b6102a781610726565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602d60248201527f506179726f6c6c3a2043616e6e6f74207365742061203020616464726573732060448201526c30b99039bbb0b82937baba32b960991b606482015260840161025d565b609a805460ff1916821515908117909155609780546001600160a01b0319166001600160a01b0385169081179091556040805191825260208201929092527fa93750f85ffdb877ffb446c32e8a1033c18e7746ffdd0b42d7edee2c98e7db3c910160405180910390a15050565b666a94d74f43000081106106ea5760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a204665652073686f756c64206265206c657373207468616e60448201526220332560e81b606482015260840161025d565b60998190556040518181527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3906020015b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166107ce5760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a2046656520616464726573732063616e2774206265203000604482015260640161025d565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1e93c69f2847f79bfa4d71704aaa84a581729b4b1706d922ee42ba1848a45c99060200161071b565b61082885333087610c1f565b609a5460ff16156108c05760005b818110156108ba576108a886848484818110610854576108546116cb565b61086a926020608090920201908101915061148b565b85858581811061087c5761087c6116cb565b90506080020160200135868686818110610898576108986116cb565b9050608002016040013588610d25565b806108b2816116f7565b915050610836565b50610973565b60005b818110156109715761095f868484848181106108e1576108e16116cb565b6108f7926020608090920201908101915061148b565b858585818110610909576109096116cb565b90506080020160600160208101906109219190611712565b868686818110610933576109336116cb565b9050608002016020013587878781811061094f5761094f6116cb565b9050608002016040013589610e8e565b80610969816116f7565b9150506108c3565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611737565b90508015610a0057610a00863383610fd2565b505050505050565b60005b81811015610ac357610ab1838383818110610a2857610a286116cb565b9050602002810190610a3a9190611750565b610a4890602081019061148b565b848484818110610a5a57610a5a6116cb565b9050602002810190610a6c9190611750565b610a7a906020810190611770565b868686818110610a8c57610a8c6116cb565b9050602002810190610a9e9190611750565b610aac906040810190611770565b6110cb565b80610abb816116f7565b915050610a0b565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610b2491906117ba565b6000604051808303816000865af19150503d8060008114610b61576040519150601f19603f3d011682016040523d82523d6000602084013e610b66565b606091505b5091509150818015610b90575080511580610b90575080806020019051810190610b9091906117f5565b6105105760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161025d565b600054610100900460ff16610be85760405162461bcd60e51b815260040161025d90611812565b6102de6113b3565b600054610100900460ff16610c175760405162461bcd60e51b815260040161025d90611812565b6102de6113e1565b600080856001600160a01b03166323b872dd60e01b868686604051602401610c499392919061185d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610c8791906117ba565b6000604051808303816000865af19150503d8060008114610cc4576040519150601f19603f3d011682016040523d82523d6000602084013e610cc9565b606091505b5091509150818015610cf3575080511580610cf3575080806020019051810190610cf391906117f5565b610a005760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015260640161025d565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110610d5a57610d5a6116cb565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610d8e57610d8e6116cb565b6001600160a01b039283166020918202929092010152609754604051634401edf760e11b81526000929190911690638803dbee90610dd89088908890879033908a90600401611897565b600060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2e9190810190611913565b600081518110610e4057610e406116cb565b602002602001015190507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56878783604051610e7d9392919061185d565b60405180910390a150505050505050565b60975460408051610100810182526001600160a01b0389811682528881166020830190815262ffffff898116848601908152336060860190815263ffffffff89166080870190815260a087018c815260c088018c8152600060e08a018181529a51631b67c43360e31b81529951891660048b01529651881660248a015293519094166044880152905185166064870152516084860152905160a48501525160c48401529251811660e48301529192919091169063db3e21989061010401602060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190611737565b90507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56878783604051610e7d9392919061185d565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161102e91906117ba565b6000604051808303816000865af19150503d806000811461106b576040519150601f19603f3d011682016040523d82523d6000602084013e611070565b606091505b509150915081801561109a57508051158061109a57508080602001905181019061109a91906117f5565b6105105760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161025d565b6001600160a01b0385166111215760405162461bcd60e51b815260206004820152601b60248201527f506179726f6c6c3a20546f6b656e206973203020616464726573730000000000604482015260640161025d565b8061116e5760405162461bcd60e51b815260206004820152601f60248201527f506179726f6c6c3a204e6f20616d6f756e747320746f207472616e7366657200604482015260640161025d565b8083146111cb5760405162461bcd60e51b815260206004820152602560248201527f506179726f6c6c3a20417272617973206d75737420686176652073616d65206c6044820152640cadccee8d60db1b606482015260840161025d565b6000805b848110156113045760008686838181106111eb576111eb6116cb565b9050602002016020810190611200919061148b565b6001600160a01b031614156112635760405162461bcd60e51b815260206004820152602360248201527f506179726f6c6c3a2043616e6e6f742073656e6420746f20612030206164647260448201526265737360e81b606482015260840161025d565b670de0b6b3a7640000609954858584818110611281576112816116cb565b9050602002013561129291906119d1565b61129c91906119f0565b6112a69083611a12565b91506112f287338888858181106112bf576112bf6116cb565b90506020020160208101906112d4919061148b565b8787868181106112e6576112e66116cb565b90506020020135610c1f565b806112fc816116f7565b9150506111cf565b507f12bf982271e0dbba6878628c37389b80d96734e56444e0fa59baf971be04c1b5868686868660405161133c959493929190611a2a565b60405180910390a180156113645760985461136490879033906001600160a01b031684610c1f565b6098546040517f945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d916113a39189916001600160a01b031690859061185d565b60405180910390a1505050505050565b600054610100900460ff166113da5760405162461bcd60e51b815260040161025d90611812565b6001606555565b600054610100900460ff166114085760405162461bcd60e51b815260040161025d90611812565b6102de33610726565b80356001600160a01b038116811461142857600080fd5b919050565b80151581146102a757600080fd5b6000806040838503121561144e57600080fd5b61145783611411565b915060208301356114678161142d565b809150509250929050565b60006020828403121561148457600080fd5b5035919050565b60006020828403121561149d57600080fd5b6114a682611411565b9392505050565b60008083601f8401126114bf57600080fd5b50813567ffffffffffffffff8111156114d757600080fd5b6020830191508360208260051b85010111156114f257600080fd5b9250929050565b600080600080600080600060a0888a03121561151457600080fd5b61151d88611411565b965060208801359550604088013563ffffffff8116811461153d57600080fd5b9450606088013567ffffffffffffffff8082111561155a57600080fd5b818a0191508a601f83011261156e57600080fd5b81358181111561157d57600080fd5b8b60208260071b850101111561159257600080fd5b6020830196508095505060808a01359150808211156115b057600080fd5b506115bd8a828b016114ad565b989b979a50959850939692959293505050565b600080602083850312156115e357600080fd5b823567ffffffffffffffff8111156115fa57600080fd5b611606858286016114ad565b90969095509350505050565b6000806000806080858703121561162857600080fd5b61163185611411565b935060208501356116418161142d565b925061164f60408601611411565b9396929550929360600135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561170b5761170b6116e1565b5060010190565b60006020828403121561172457600080fd5b813562ffffff811681146114a657600080fd5b60006020828403121561174957600080fd5b5051919050565b60008235605e1983360301811261176657600080fd5b9190910192915050565b6000808335601e1984360301811261178757600080fd5b83018035915067ffffffffffffffff8211156117a257600080fd5b6020019150600581901b36038213156114f257600080fd5b6000825160005b818110156117db57602081860181015185830152016117c1565b818111156117ea576000828501525b509190910192915050565b60006020828403121561180757600080fd5b81516114a68161142d565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156118e75784516001600160a01b0316835293830193918301916001016118c2565b50506001600160a01b0396909616606085015250505063ffffffff919091166080909101529392505050565b6000602080838503121561192657600080fd5b825167ffffffffffffffff8082111561193e57600080fd5b818501915085601f83011261195257600080fd5b81518181111561196457611964611881565b8060051b604051601f19603f8301168101818110858211171561198957611989611881565b6040529182528482019250838101850191888311156119a757600080fd5b938501935b828510156119c5578451845293850193928501926119ac565b98975050505050505050565b60008160001904831182151516156119eb576119eb6116e1565b500290565b600082611a0d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611a2557611a256116e1565b500190565b6001600160a01b03868116825260606020808401829052908301869052600091879160808501845b89811015611a775783611a6486611411565b1682529382019390820190600101611a52565b5085810360408701528681526001600160fb1b03871115611a9757600080fd5b8660051b935083888383013760009301019182525097965050505050505056fea26469706673582212201b057c2547a4ed0f6f88581322c91cd02cf104dc8fb74cd90bcb563e130e51c464736f6c63430008090033",
  "devdoc": {
    "author": "Think and Dev Team",
    "kind": "dev",
    "methods": {
      "approveTokens(address[])": {
        "params": {
          "_erc20TokenOrigin": "ERC20 token address to approve."
        }
      },
      "initialize(address,bool,address,uint256)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "params": {
          "_payments": "The array of the Payment data."
        }
      },
      "performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail.",
          "_erc20TokenOrigin": "ERC20 token address to swap for another.",
          "_payments": "The array of the Payment data.",
          "_swaps": "The array of the Swaps data.",
          "_totalAmountToSwap": "Total amount of erc20TokenOrigin to spend in swaps."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "Percentage that will be charged."
        }
      },
      "setFeeAddress(address)": {
        "params": {
          "_feeAddress": "Address that will receive the fees."
        }
      },
      "setSwapRouter(address,bool)": {
        "params": {
          "_isSwapV2": "Boolean to specify the version of the router; true means v2, false means v3.",
          "_swapRouter": "Router address to execute swaps."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Think and Dev Paymentbox",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveTokens(address[])": {
        "notice": "Approves the following token to be used on swapRouter"
      },
      "isSwapV2()": {
        "notice": "Returns if the contract is working with a v2 Uniswap protocol; true means v2, false means v3."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "notice": "Perform the payments to the given addresses and amounts, public method."
      },
      "performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,address[],uint256[])[])": {
        "notice": "Perform the swap and the transfer to the given addresses.Currently the function only works with ERC20 tokens."
      },
      "setFee(uint256)": {
        "notice": "Set the fee that will be charged, fees are divided by mantissa"
      },
      "setFeeAddress(address)": {
        "notice": "Set the address that will receive the fees."
      },
      "setSwapRouter(address,bool)": {
        "notice": "Set the SwapRouter and the version to be used."
      },
      "swapRouter()": {
        "notice": "Returns the address of the Uniswap protocol router, it could be v2 or v3."
      }
    },
    "notice": "Swap and transfer multiple ERC20 pairs to multiple accounts in a single transaction. Use any router address of any DEX that uses Uniswap protocol v2 or v3 to make swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2993,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "swapRouter",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IUniswapBasic)3766"
      },
      {
        "astId": 2995,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "feeAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 2997,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "fee",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 3003,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "isSwapV2",
        "offset": 0,
        "slot": "154",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapBasic)3766": {
        "encoding": "inplace",
        "label": "contract IUniswapBasic",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}