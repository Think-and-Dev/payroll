{
  "address": "0x41dCDf0a0Ab8BdD2FF653408D27693D319C55C4F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPaymentFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReceived",
          "type": "uint256"
        }
      ],
      "name": "SwapFinished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapV2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TokenOrigin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountToSpend",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMax",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct Payroll.Swap[]",
          "name": "_swaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmountToPay",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Payroll.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performSwapAndPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSwapV2",
          "type": "bool"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapBasic",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf15ec95d023df2851d557831e2b5266d582fd2810ca3c9a7437eb4901118a17",
  "receipt": {
    "to": null,
    "from": "0x62c751F207517c7f0f4f86720Be4e4368f519d67",
    "contractAddress": "0x41dCDf0a0Ab8BdD2FF653408D27693D319C55C4F",
    "transactionIndex": 2,
    "gasUsed": "1276583",
    "logsBloom": "0x
    "blockHash": "0x22fb08f239bd435f49500beee0d907a7ba252ff86b4f38ccc1105bdcf522f656",
    "transactionHash": "0xbf15ec95d023df2851d557831e2b5266d582fd2810ca3c9a7437eb4901118a17",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 19059544,
        "transactionHash": "0xbf15ec95d023df2851d557831e2b5266d582fd2810ca3c9a7437eb4901118a17",
        "address": "0x41dCDf0a0Ab8BdD2FF653408D27693D319C55C4F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000062c751f207517c7f0f4f86720be4e4368f519d67"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x22fb08f239bd435f49500beee0d907a7ba252ff86b4f38ccc1105bdcf522f656"
      }
    ],
    "blockNumber": 19059544,
    "cumulativeGasUsed": "2142309",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ce594d5d30d3039d29e897c90e069c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPaymentFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReceived\",\"type\":\"uint256\"}],\"name\":\"SwapFinished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenOrigin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct Payroll.Swap[]\",\"name\":\"_swaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountToPay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Payroll.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performSwapAndPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapV2\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapBasic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lucas Marc\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])\":{\"params\":{\"_deadline\":\"The unix timestamp after a swap will fail\",\"_erc20TokenOrigin\":\"ERC20 token address to swap for another\",\"_payments\":\"The array of the Payment data\",\"_swaps\":\"The array of the Swaps data\",\"_totalAmountToSpend\":\"Total amount of erc20TokenOrigin to spend in swaps and payments. You must know the total amount of erc20TokenOrigin to spend on swaps and also to spend on payments.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSwapRouter(address,bool)\":{\"params\":{\"_swapRouter\":\"Router address to execute swaps\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A contract that allows multiple payments in one transaction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])\":{\"notice\":\"Perform the swap, the transfer and finally the payment to the given addressesCurrently the function only works with ERC20 tokens\"},\"setSwapRouter(address,bool)\":{\"notice\":\"Set the SwapRouter and the version to be used\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payroll.sol\":\"Payroll\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IERC20Basic.sol\\\";\\nimport \\\"./interfaces/IUniswapBasic.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\n/**\\n * @title A contract that allows multiple payments in one transaction\\n * @author Lucas Marc\\n */\\ncontract Payroll is Ownable, Initializable {\\n    IUniswapBasic public swapRouter;\\n    bool public isSwapV2;\\n\\n    struct Payment {\\n        address token;\\n        uint256 totalAmountToPay;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n\\n    struct Swap {\\n        address token;\\n        uint256 amountOut;\\n        uint256 amountInMax;\\n        uint24 poolFee;\\n    }\\n\\n    function initialize(address _swapRouter, bool _isSwapV2) public initializer {\\n        isSwapV2 = _isSwapV2;\\n        swapRouter = IUniswapBasic(_swapRouter);\\n    }\\n\\n    /**\\n     * Set the SwapRouter and the version to be used\\n     * @param _swapRouter Router address to execute swaps\\n     */\\n    function setSwapRouter(address _swapRouter, bool _isSwapV2) public onlyOwner {\\n        isSwapV2 = _isSwapV2;\\n        swapRouter = IUniswapBasic(_swapRouter);\\n    }\\n\\n    event BatchPaymentFinished(address[] _receivers, uint256[] _amountsToTransfer);\\n\\n    event SwapFinished(address _tokenIn, address _tokenOut, uint256 _amountReceived);\\n\\n    /**\\n     * Perform the swap, the transfer and finally the payment to the given addresses\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another\\n     * @param _totalAmountToSpend Total amount of erc20TokenOrigin to spend in swaps and payments.\\n     * You must know the total amount of erc20TokenOrigin to spend on swaps and also to spend on payments.\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @param _swaps The array of the Swaps data\\n     * @param _payments The array of the Payment data\\n     * @notice Currently the function only works with ERC20 tokens\\n     */\\n    function performSwapAndPayment(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSpend,\\n        uint32 _deadline,\\n        Swap[] calldata _swaps,\\n        Payment[] calldata _payments\\n    ) external {\\n        if (_swaps.length > 0) {\\n            performSwap(_erc20TokenOrigin, _totalAmountToSpend, _deadline, _swaps);\\n        }\\n\\n        transferFromWallet(_payments);\\n        performMultiPayment(_payments);\\n\\n        // returns the leftover of erc20TokenOrigin if it was not used in payments\\n        returnLeftover(_erc20TokenOrigin);\\n    }\\n\\n    /**\\n     * Transfer the totalAmountToPay minus the current balance of the contract\\n     * for each token from the msg.sender to this contract\\n     * msg.sender must approve this contract for each token\\n     * @param _payments The array of the Payment data\\n     * @notice Currently the function only works with ERC20 tokens\\n     */\\n    function transferFromWallet(Payment[] calldata _payments) internal {\\n        uint256 currentBalance;\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            currentBalance = IERC20Basic(_payments[i].token).balanceOf(address(this));\\n            if (_payments[i].totalAmountToPay > currentBalance) {\\n                TransferHelper.safeTransferFrom(\\n                    _payments[i].token,\\n                    msg.sender,\\n                    address(this),\\n                    _payments[i].totalAmountToPay - currentBalance\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Perform the swap to the given token addresses and amounts\\n     * @param _erc20TokenOrigin ERC20 token address to swap for another\\n     * @param _totalAmountToSpend Total amount of erc20TokenOrigin to spend in swaps\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @param _swaps The array of the Swaps data\\n     * @notice Currently the function only works with ERC20 tokens\\n     */\\n    function performSwap(\\n        address _erc20TokenOrigin,\\n        uint256 _totalAmountToSpend,\\n        uint32 _deadline,\\n        Swap[] calldata _swaps\\n    ) internal {\\n        // transfer the totalAmountToSpend of erc20TokenOrigin from the msg.sender to this contract\\n        // msg.sender must approve this contract for erc20TokenOrigin\\n        TransferHelper.safeTransferFrom(_erc20TokenOrigin, msg.sender, address(this), _totalAmountToSpend);\\n\\n        // approves the swapRouter to spend totalAmountToSpend of erc20TokenOrigin\\n        TransferHelper.safeApprove(_erc20TokenOrigin, address(swapRouter), _totalAmountToSpend);\\n\\n        if (isSwapV2) {\\n            for (uint256 i = 0; i < _swaps.length; i++) {\\n                swapTokensForExactTokens(\\n                    _erc20TokenOrigin,\\n                    _swaps[i].token,\\n                    _swaps[i].amountOut,\\n                    _swaps[i].amountInMax,\\n                    _deadline\\n                );\\n            }\\n        } else {\\n            for (uint256 i = 0; i < _swaps.length; i++) {\\n                swapExactOutputSingle(\\n                    _erc20TokenOrigin,\\n                    _swaps[i].token,\\n                    _swaps[i].poolFee,\\n                    _swaps[i].amountOut,\\n                    _swaps[i].amountInMax,\\n                    _deadline\\n                );\\n            }\\n        }\\n\\n        // removes the approval to swapRouter\\n        TransferHelper.safeApprove(_erc20TokenOrigin, address(swapRouter), 0);\\n    }\\n\\n    /**\\n     * Perform ERC20 tokens swap using UniSwap v2 protocol\\n     * @param _tokenIn ERC20 token address to swap for another\\n     * @param _tokenOut ERC20 token address to receive\\n     * @param _amountOut Exact amount of tokenOut to receive\\n     * @param _amountInMax Max amount of tokenIn to pay\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @notice Currently the function only works with ERC20 tokens\\n     * @notice Currently the function only works with single pools tokenIn/tokenOut\\n     */\\n    function swapTokensForExactTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint32 _deadline\\n    ) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        // return the amount spend of tokenIn\\n        uint256 amountIn = swapRouter.swapTokensForExactTokens(\\n            _amountOut,\\n            _amountInMax,\\n            path,\\n            address(this),\\n            _deadline\\n        )[0];\\n\\n        emit SwapFinished(_tokenIn, _tokenOut, amountIn);\\n    }\\n\\n    /**\\n     * Perform ERC20 tokens swap using UniSwap v3 protocol\\n     * @param _tokenIn ERC20 token address to swap for another\\n     * @param _tokenOut ERC20 token address to receive\\n     * @param _poolFee Pool fee tokenIn/tokenOut\\n     * @param _amountOut Exact amount of tokenOut to receive\\n     * @param _amountInMax Max amount of tokenIn to pay\\n     * @param _deadline The unix timestamp after a swap will fail\\n     * @notice Currently the function only works with ERC20 tokens\\n     * @notice Currently the function only works with single pools tokenIn/tokenOut\\n     */\\n    function swapExactOutputSingle(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint24 _poolFee,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint32 _deadline\\n    ) internal {\\n\\n        // return the amount spend of tokenIn\\n        uint256 amountIn = swapRouter.exactOutputSingle(\\n            IUniswapBasic.ExactOutputSingleParams({\\n                tokenIn: _tokenIn,\\n                tokenOut: _tokenOut,\\n                fee: _poolFee,\\n                recipient: address(this),\\n                deadline: _deadline,\\n                amountOut: _amountOut,\\n                amountInMaximum: _amountInMax,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        emit SwapFinished(_tokenIn, _tokenOut, amountIn);\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts\\n     * @param _payments The array of the Payment data\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) internal {\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            performPayment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n\\n            // return the leftover for each token after perform all payments\\n            returnLeftover(_payments[i].token);\\n        }\\n    }\\n\\n    /**\\n     * Performs the payment to the given addresses\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer\\n     * @param _receivers The array of payment receivers\\n     * @param _amountsToTransfer The array of payments' amounts to perform. The amount will be transfered to the address on _receivers with the same index.\\n     * @notice Currently the function only works with only one ERC20 token\\n     */\\n    function performPayment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        require(_amountsToTransfer.length == _receivers.length, \\\"Arrays must have same length\\\");\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Cannot send to a 0 address\\\");\\n            TransferHelper.safeTransfer(_erc20TokenAddress, _receivers[i], _amountsToTransfer[i]);\\n        }\\n        emit BatchPaymentFinished(_receivers, _amountsToTransfer);\\n    }\\n\\n    /**\\n     * Return all balance of an ERC20 to the msg.sender\\n     * @param _erc20TokenAddress The address of the ERC20 token to transfer\\n     * @notice Currently the function only works with only one ERC20 token\\n     */\\n    function returnLeftover(address _erc20TokenAddress) internal {\\n        uint256 accountBalance = IERC20Basic(_erc20TokenAddress).balanceOf(address(this));\\n\\n        if (accountBalance > 0) {\\n            TransferHelper.safeTransfer(_erc20TokenAddress, msg.sender, accountBalance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed35d824a80ac536e2c3be2ebc8aea73eff5e2279c7b173f088319dc2e157c28\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n */\\ninterface IERC20Basic {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c0c04761983cc5575bb5a14f1770526759be908a37ae9daf0ca669de1933756\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IUniswapBasic.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title UniswapBasic\\n * @dev Simpler version of Uniswap v2 and v3 protocol interface\\n */\\ninterface IUniswapBasic {\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x42cb8fd32a603eabafe016097c921a562b6f7d328f61ac52d4ad876d3d79a4f9\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6115b38061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d0578063c31c9c07146100fa578063f2fde38b1461010d578063f65a83cf1461012057600080fd5b80632171dcc91461008d578063400ada75146100a2578063715018a6146100b5578063891aad70146100bd575b600080fd5b6100a061009b36600461104e565b610144565b005b6100a06100b036600461104e565b6101b1565b6100a0610255565b6100a06100cb3660046110d1565b61028b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100dd906001600160a01b031681565b6100a061011b3660046111a8565b6102c4565b60015461013490600160a01b900460ff1681565b60405190151581526020016100f1565b6000546001600160a01b031633146101775760405162461bcd60e51b815260040161016e906111ca565b60405180910390fd5b600180546001600160a01b039093166001600160a01b0319921515600160a01b02929092166001600160a81b031990931692909217179055565b60006101bd600161035f565b905080156101d9576000805460ff60a81b1916600160a81b1790555b600180546001600160a81b031916600160a01b841515026001600160a01b031916176001600160a01b0385161790558015610250576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000546001600160a01b0316331461027f5760405162461bcd60e51b815260040161016e906111ca565b61028960006103ff565b565b821561029e5761029e878787878761044f565b6102a882826105e5565b6102b28282610754565b6102bb87610849565b50505050505050565b6000546001600160a01b031633146102ee5760405162461bcd60e51b815260040161016e906111ca565b6001600160a01b0381166103535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161016e565b61035c816103ff565b50565b60008054600160a81b900460ff16156103a8578160ff1660011480156103845750303b155b6103a05760405162461bcd60e51b815260040161016e906111ff565b506000919050565b60005460ff808416600160a01b90920416106103d65760405162461bcd60e51b815260040161016e906111ff565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61045b853330876108da565b6001546104739086906001600160a01b0316866109e4565b600154600160a01b900460ff16156105125760005b8181101561050c576104fa868484848181106104a6576104a661124d565b6104bc92602060809092020190810191506111a8565b8585858181106104ce576104ce61124d565b905060800201602001358686868181106104ea576104ea61124d565b9050608002016040013588610add565b8061050481611279565b915050610488565b506105c5565b60005b818110156105c3576105b1868484848181106105335761053361124d565b61054992602060809092020190810191506111a8565b85858581811061055b5761055b61124d565b90506080020160600160208101906105739190611294565b8686868181106105855761058561124d565b905060800201602001358787878181106105a1576105a161124d565b9050608002016040013589610c5c565b806105bb81611279565b915050610515565b505b6001546105de9086906001600160a01b031660006109e4565b5050505050565b6000805b8281101561074e578383828181106106035761060361124d565b905060200281019061061591906112b9565b6106239060208101906111a8565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c91906112d9565b9150818484838181106106b1576106b161124d565b90506020028101906106c391906112b9565b60200135111561073c5761073c8484838181106106e2576106e261124d565b90506020028101906106f491906112b9565b6107029060208101906111a8565b3330858888878181106107175761071761124d565b905060200281019061072991906112b9565b6020013561073791906112f2565b6108da565b8061074681611279565b9150506105e9565b50505050565b60005b81811015610250576107fd8383838181106107745761077461124d565b905060200281019061078691906112b9565b6107949060208101906111a8565b8484848181106107a6576107a661124d565b90506020028101906107b891906112b9565b6107c6906040810190611309565b8686868181106107d8576107d861124d565b90506020028101906107ea91906112b9565b6107f8906060810190611309565b610db6565b6108378383838181106108125761081261124d565b905060200281019061082491906112b9565b6108329060208101906111a8565b610849565b8061084181611279565b915050610757565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561088b57600080fd5b505afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c391906112d9565b905080156108d6576108d6823383610f30565b5050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161093e9190611353565b6000604051808303816000865af19150503d806000811461097b576040519150601f19603f3d011682016040523d82523d6000602084013e610980565b606091505b50915091508180156109aa5750805115806109aa5750808060200190518101906109aa919061138e565b6109dc5760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015260640161016e565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610a409190611353565b6000604051808303816000865af19150503d8060008114610a7d576040519150601f19603f3d011682016040523d82523d6000602084013e610a82565b606091505b5091509150818015610aac575080511580610aac575080806020019051810190610aac919061138e565b6105de5760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161016e565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110610b1257610b1261124d565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610b4657610b4661124d565b6001600160a01b039283166020918202929092010152600154604051634401edf760e11b81526000929190911690638803dbee90610b909088908890879030908a906004016113c1565b600060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be6919081019061143d565b600081518110610bf857610bf861124d565b602090810291909101810151604080516001600160a01b03808c1682528a1693810193909352820181905291507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56906060015b60405180910390a150505050505050565b60015460408051610100810182526001600160a01b0389811682528881166020830190815262ffffff898116848601908152306060860190815263ffffffff89166080870190815260a087018c815260c088018c8152600060e08a018181529a51631b67c43360e31b81529951891660048b01529651881660248a015293519094166044880152905185166064870152516084860152905160a48501525160c48401529251811660e48301529192919091169063db3e21989061010401602060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b91906112d9565b604080516001600160a01b03808b168252891660208201529081018290529091507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5690606001610c4b565b808314610e055760405162461bcd60e51b815260206004820152601c60248201527f417272617973206d75737420686176652073616d65206c656e67746800000000604482015260640161016e565b60005b83811015610eeb576000858583818110610e2457610e2461124d565b9050602002016020810190610e3991906111a8565b6001600160a01b03161415610e905760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073656e6420746f206120302061646472657373000000000000604482015260640161016e565b610ed986868684818110610ea657610ea661124d565b9050602002016020810190610ebb91906111a8565b858585818110610ecd57610ecd61124d565b90506020020135610f30565b80610ee381611279565b915050610e08565b507f6b82a3962e5fe7c719b4bec2b902045249682ce10c3004d113ae455e5d8c563d84848484604051610f2194939291906114fb565b60405180910390a15050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610f8c9190611353565b6000604051808303816000865af19150503d8060008114610fc9576040519150601f19603f3d011682016040523d82523d6000602084013e610fce565b606091505b5091509150818015610ff8575080511580610ff8575080806020019051810190610ff8919061138e565b6105de5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161016e565b80356001600160a01b03811681146103fa57600080fd5b801515811461035c57600080fd5b6000806040838503121561106157600080fd5b61106a83611029565b9150602083013561107a81611040565b809150509250929050565b60008083601f84011261109757600080fd5b50813567ffffffffffffffff8111156110af57600080fd5b6020830191508360208260051b85010111156110ca57600080fd5b9250929050565b600080600080600080600060a0888a0312156110ec57600080fd5b6110f588611029565b965060208801359550604088013563ffffffff8116811461111557600080fd5b9450606088013567ffffffffffffffff8082111561113257600080fd5b818a0191508a601f83011261114657600080fd5b81358181111561115557600080fd5b8b60208260071b850101111561116a57600080fd5b6020830196508095505060808a013591508082111561118857600080fd5b506111958a828b01611085565b989b979a50959850939692959293505050565b6000602082840312156111ba57600080fd5b6111c382611029565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561128d5761128d611263565b5060010190565b6000602082840312156112a657600080fd5b813562ffffff811681146111c357600080fd5b60008235607e198336030181126112cf57600080fd5b9190910192915050565b6000602082840312156112eb57600080fd5b5051919050565b60008282101561130457611304611263565b500390565b6000808335601e1984360301811261132057600080fd5b83018035915067ffffffffffffffff82111561133b57600080fd5b6020019150600581901b36038213156110ca57600080fd5b6000825160005b81811015611374576020818601810151858301520161135a565b81811115611383576000828501525b509190910192915050565b6000602082840312156113a057600080fd5b81516111c381611040565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156114115784516001600160a01b0316835293830193918301916001016113ec565b50506001600160a01b0396909616606085015250505063ffffffff919091166080909101529392505050565b6000602080838503121561145057600080fd5b825167ffffffffffffffff8082111561146857600080fd5b818501915085601f83011261147c57600080fd5b81518181111561148e5761148e6113ab565b8060051b604051601f19603f830116810181811085821117156114b3576114b36113ab565b6040529182528482019250838101850191888311156114d157600080fd5b938501935b828510156114ef578451845293850193928501926114d6565b98975050505050505050565b6040808252810184905260008560608301825b8781101561153c576001600160a01b0361152784611029565b1682526020928301929091019060010161150e565b5083810360208501528481526001600160fb1b0385111561155c57600080fd5b8460051b91508186602083013760009101602001908152969550505050505056fea2646970667358221220260e35785d4c7201935e51fe71c2e385f001bcf9e8f09e50e256531afda42c9164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d0578063c31c9c07146100fa578063f2fde38b1461010d578063f65a83cf1461012057600080fd5b80632171dcc91461008d578063400ada75146100a2578063715018a6146100b5578063891aad70146100bd575b600080fd5b6100a061009b36600461104e565b610144565b005b6100a06100b036600461104e565b6101b1565b6100a0610255565b6100a06100cb3660046110d1565b61028b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100dd906001600160a01b031681565b6100a061011b3660046111a8565b6102c4565b60015461013490600160a01b900460ff1681565b60405190151581526020016100f1565b6000546001600160a01b031633146101775760405162461bcd60e51b815260040161016e906111ca565b60405180910390fd5b600180546001600160a01b039093166001600160a01b0319921515600160a01b02929092166001600160a81b031990931692909217179055565b60006101bd600161035f565b905080156101d9576000805460ff60a81b1916600160a81b1790555b600180546001600160a81b031916600160a01b841515026001600160a01b031916176001600160a01b0385161790558015610250576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000546001600160a01b0316331461027f5760405162461bcd60e51b815260040161016e906111ca565b61028960006103ff565b565b821561029e5761029e878787878761044f565b6102a882826105e5565b6102b28282610754565b6102bb87610849565b50505050505050565b6000546001600160a01b031633146102ee5760405162461bcd60e51b815260040161016e906111ca565b6001600160a01b0381166103535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161016e565b61035c816103ff565b50565b60008054600160a81b900460ff16156103a8578160ff1660011480156103845750303b155b6103a05760405162461bcd60e51b815260040161016e906111ff565b506000919050565b60005460ff808416600160a01b90920416106103d65760405162461bcd60e51b815260040161016e906111ff565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61045b853330876108da565b6001546104739086906001600160a01b0316866109e4565b600154600160a01b900460ff16156105125760005b8181101561050c576104fa868484848181106104a6576104a661124d565b6104bc92602060809092020190810191506111a8565b8585858181106104ce576104ce61124d565b905060800201602001358686868181106104ea576104ea61124d565b9050608002016040013588610add565b8061050481611279565b915050610488565b506105c5565b60005b818110156105c3576105b1868484848181106105335761053361124d565b61054992602060809092020190810191506111a8565b85858581811061055b5761055b61124d565b90506080020160600160208101906105739190611294565b8686868181106105855761058561124d565b905060800201602001358787878181106105a1576105a161124d565b9050608002016040013589610c5c565b806105bb81611279565b915050610515565b505b6001546105de9086906001600160a01b031660006109e4565b5050505050565b6000805b8281101561074e578383828181106106035761060361124d565b905060200281019061061591906112b9565b6106239060208101906111a8565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c91906112d9565b9150818484838181106106b1576106b161124d565b90506020028101906106c391906112b9565b60200135111561073c5761073c8484838181106106e2576106e261124d565b90506020028101906106f491906112b9565b6107029060208101906111a8565b3330858888878181106107175761071761124d565b905060200281019061072991906112b9565b6020013561073791906112f2565b6108da565b8061074681611279565b9150506105e9565b50505050565b60005b81811015610250576107fd8383838181106107745761077461124d565b905060200281019061078691906112b9565b6107949060208101906111a8565b8484848181106107a6576107a661124d565b90506020028101906107b891906112b9565b6107c6906040810190611309565b8686868181106107d8576107d861124d565b90506020028101906107ea91906112b9565b6107f8906060810190611309565b610db6565b6108378383838181106108125761081261124d565b905060200281019061082491906112b9565b6108329060208101906111a8565b610849565b8061084181611279565b915050610757565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561088b57600080fd5b505afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c391906112d9565b905080156108d6576108d6823383610f30565b5050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161093e9190611353565b6000604051808303816000865af19150503d806000811461097b576040519150601f19603f3d011682016040523d82523d6000602084013e610980565b606091505b50915091508180156109aa5750805115806109aa5750808060200190518101906109aa919061138e565b6109dc5760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015260640161016e565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610a409190611353565b6000604051808303816000865af19150503d8060008114610a7d576040519150601f19603f3d011682016040523d82523d6000602084013e610a82565b606091505b5091509150818015610aac575080511580610aac575080806020019051810190610aac919061138e565b6105de5760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161016e565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110610b1257610b1261124d565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610b4657610b4661124d565b6001600160a01b039283166020918202929092010152600154604051634401edf760e11b81526000929190911690638803dbee90610b909088908890879030908a906004016113c1565b600060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be6919081019061143d565b600081518110610bf857610bf861124d565b602090810291909101810151604080516001600160a01b03808c1682528a1693810193909352820181905291507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b56906060015b60405180910390a150505050505050565b60015460408051610100810182526001600160a01b0389811682528881166020830190815262ffffff898116848601908152306060860190815263ffffffff89166080870190815260a087018c815260c088018c8152600060e08a018181529a51631b67c43360e31b81529951891660048b01529651881660248a015293519094166044880152905185166064870152516084860152905160a48501525160c48401529251811660e48301529192919091169063db3e21989061010401602060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b91906112d9565b604080516001600160a01b03808b168252891660208201529081018290529091507f2d8d9d7f49599a20c9e475f932138bdf56ab8ddbcd627a642030d3d788012b5690606001610c4b565b808314610e055760405162461bcd60e51b815260206004820152601c60248201527f417272617973206d75737420686176652073616d65206c656e67746800000000604482015260640161016e565b60005b83811015610eeb576000858583818110610e2457610e2461124d565b9050602002016020810190610e3991906111a8565b6001600160a01b03161415610e905760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073656e6420746f206120302061646472657373000000000000604482015260640161016e565b610ed986868684818110610ea657610ea661124d565b9050602002016020810190610ebb91906111a8565b858585818110610ecd57610ecd61124d565b90506020020135610f30565b80610ee381611279565b915050610e08565b507f6b82a3962e5fe7c719b4bec2b902045249682ce10c3004d113ae455e5d8c563d84848484604051610f2194939291906114fb565b60405180910390a15050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610f8c9190611353565b6000604051808303816000865af19150503d8060008114610fc9576040519150601f19603f3d011682016040523d82523d6000602084013e610fce565b606091505b5091509150818015610ff8575080511580610ff8575080806020019051810190610ff8919061138e565b6105de5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161016e565b80356001600160a01b03811681146103fa57600080fd5b801515811461035c57600080fd5b6000806040838503121561106157600080fd5b61106a83611029565b9150602083013561107a81611040565b809150509250929050565b60008083601f84011261109757600080fd5b50813567ffffffffffffffff8111156110af57600080fd5b6020830191508360208260051b85010111156110ca57600080fd5b9250929050565b600080600080600080600060a0888a0312156110ec57600080fd5b6110f588611029565b965060208801359550604088013563ffffffff8116811461111557600080fd5b9450606088013567ffffffffffffffff8082111561113257600080fd5b818a0191508a601f83011261114657600080fd5b81358181111561115557600080fd5b8b60208260071b850101111561116a57600080fd5b6020830196508095505060808a013591508082111561118857600080fd5b506111958a828b01611085565b989b979a50959850939692959293505050565b6000602082840312156111ba57600080fd5b6111c382611029565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561128d5761128d611263565b5060010190565b6000602082840312156112a657600080fd5b813562ffffff811681146111c357600080fd5b60008235607e198336030181126112cf57600080fd5b9190910192915050565b6000602082840312156112eb57600080fd5b5051919050565b60008282101561130457611304611263565b500390565b6000808335601e1984360301811261132057600080fd5b83018035915067ffffffffffffffff82111561133b57600080fd5b6020019150600581901b36038213156110ca57600080fd5b6000825160005b81811015611374576020818601810151858301520161135a565b81811115611383576000828501525b509190910192915050565b6000602082840312156113a057600080fd5b81516111c381611040565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156114115784516001600160a01b0316835293830193918301916001016113ec565b50506001600160a01b0396909616606085015250505063ffffffff919091166080909101529392505050565b6000602080838503121561145057600080fd5b825167ffffffffffffffff8082111561146857600080fd5b818501915085601f83011261147c57600080fd5b81518181111561148e5761148e6113ab565b8060051b604051601f19603f830116810181811085821117156114b3576114b36113ab565b6040529182528482019250838101850191888311156114d157600080fd5b938501935b828510156114ef578451845293850193928501926114d6565b98975050505050505050565b6040808252810184905260008560608301825b8781101561153c576001600160a01b0361152784611029565b1682526020928301929091019060010161150e565b5083810360208501528481526001600160fb1b0385111561155c57600080fd5b8460051b91508186602083013760009101602001908152969550505050505056fea2646970667358221220260e35785d4c7201935e51fe71c2e385f001bcf9e8f09e50e256531afda42c9164736f6c63430008090033",
  "devdoc": {
    "author": "Lucas Marc",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])": {
        "params": {
          "_deadline": "The unix timestamp after a swap will fail",
          "_erc20TokenOrigin": "ERC20 token address to swap for another",
          "_payments": "The array of the Payment data",
          "_swaps": "The array of the Swaps data",
          "_totalAmountToSpend": "Total amount of erc20TokenOrigin to spend in swaps and payments. You must know the total amount of erc20TokenOrigin to spend on swaps and also to spend on payments."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSwapRouter(address,bool)": {
        "params": {
          "_swapRouter": "Router address to execute swaps"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract that allows multiple payments in one transaction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performSwapAndPayment(address,uint256,uint32,(address,uint256,uint256,uint24)[],(address,uint256,address[],uint256[])[])": {
        "notice": "Perform the swap, the transfer and finally the payment to the given addressesCurrently the function only works with ERC20 tokens"
      },
      "setSwapRouter(address,bool)": {
        "notice": "Set the SwapRouter and the version to be used"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 785,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2946,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapBasic)3577"
      },
      {
        "astId": 2948,
        "contract": "contracts/Payroll.sol:Payroll",
        "label": "isSwapV2",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapBasic)3577": {
        "encoding": "inplace",
        "label": "contract IUniswapBasic",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}